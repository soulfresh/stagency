schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input Int_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _cast: Int_cast_exp
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar _text

"""
Boolean expression to compare columns of type "_text". All fields are combined with logical 'AND'.
"""
input _text_comparison_exp {
  _eq: _text
  _gt: _text
  _gte: _text
  _in: [_text!]
  _is_null: Boolean
  _lt: _text
  _lte: _text
  _neq: _text
  _nin: [_text!]
}

"""
columns and relationships of "app.artist"
"""
type app_artist {
  created_at: timestamptz!

  """An array relationship"""
  deals(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """An aggregate relationship"""
  deals_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!

  """A list of genres for the artist as plain text strings"""
  genres: _text
  id: bigint!

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  spotify_uri: String
  updated_at: timestamptz!
}

"""
aggregated selection of "app.artist"
"""
type app_artist_aggregate {
  aggregate: app_artist_aggregate_fields
  nodes: [app_artist!]!
}

"""
aggregate fields of "app.artist"
"""
type app_artist_aggregate_fields {
  avg: app_artist_avg_fields
  count(columns: [app_artist_select_column!], distinct: Boolean): Int!
  max: app_artist_max_fields
  min: app_artist_min_fields
  stddev: app_artist_stddev_fields
  stddev_pop: app_artist_stddev_pop_fields
  stddev_samp: app_artist_stddev_samp_fields
  sum: app_artist_sum_fields
  var_pop: app_artist_var_pop_fields
  var_samp: app_artist_var_samp_fields
  variance: app_artist_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input app_artist_append_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""aggregate avg on columns"""
type app_artist_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "app.artist". All fields are combined with a logical 'AND'.
"""
input app_artist_bool_exp {
  _and: [app_artist_bool_exp!]
  _not: app_artist_bool_exp
  _or: [app_artist_bool_exp!]
  created_at: timestamptz_comparison_exp
  deals: app_deal_bool_exp
  genres: _text_comparison_exp
  id: bigint_comparison_exp
  image: jsonb_comparison_exp
  name: String_comparison_exp
  spotify_uri: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.artist"
"""
enum app_artist_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  artist_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input app_artist_delete_at_path_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input app_artist_delete_elem_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input app_artist_delete_key_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: String
}

"""
input type for incrementing numeric columns in table "app.artist"
"""
input app_artist_inc_input {
  id: bigint
}

"""
input type for inserting data into table "app.artist"
"""
input app_artist_insert_input {
  created_at: timestamptz
  deals: app_deal_arr_rel_insert_input

  """A list of genres for the artist as plain text strings"""
  genres: _text
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  spotify_uri: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_artist_max_fields {
  created_at: timestamptz
  id: bigint
  name: String
  spotify_uri: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type app_artist_min_fields {
  created_at: timestamptz
  id: bigint
  name: String
  spotify_uri: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "app.artist"
"""
type app_artist_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_artist!]!
}

"""
input type for inserting object relation for remote table "app.artist"
"""
input app_artist_obj_rel_insert_input {
  data: app_artist_insert_input!

  """upsert condition"""
  on_conflict: app_artist_on_conflict
}

"""
on_conflict condition type for table "app.artist"
"""
input app_artist_on_conflict {
  constraint: app_artist_constraint!
  update_columns: [app_artist_update_column!]! = []
  where: app_artist_bool_exp
}

"""Ordering options when selecting data from "app.artist"."""
input app_artist_order_by {
  created_at: order_by
  deals_aggregate: app_deal_aggregate_order_by
  genres: order_by
  id: order_by
  image: order_by
  name: order_by
  spotify_uri: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_artist"""
input app_artist_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input app_artist_prepend_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""
select columns of table "app.artist"
"""
enum app_artist_select_column {
  """column name"""
  created_at

  """column name"""
  genres

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  spotify_uri

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.artist"
"""
input app_artist_set_input {
  created_at: timestamptz

  """A list of genres for the artist as plain text strings"""
  genres: _text
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  spotify_uri: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_artist_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type app_artist_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type app_artist_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type app_artist_sum_fields {
  id: bigint
}

"""
update columns of table "app.artist"
"""
enum app_artist_update_column {
  """column name"""
  created_at

  """column name"""
  genres

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  spotify_uri

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_artist_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type app_artist_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type app_artist_variance_fields {
  id: Float
}

"""
columns and relationships of "app.deal"
"""
type app_deal {
  """An object relationship"""
  artist: app_artist
  artist_id: bigint
  created_at: timestamptz!

  """An object relationship"""
  deal_event_billing_type: app_deal_event_billing_type

  """An object relationship"""
  deal_event_type: app_deal_event_type

  """An object relationship"""
  deal_status_type: app_deal_status_type!

  """An array relationship"""
  deal_venues(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): [app_deal_venue!]!

  """An aggregate relationship"""
  deal_venues_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): app_deal_venue_aggregate!
  event_billing_type: String
  event_type: String

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): [app_expense!]!

  """An aggregate relationship"""
  expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): app_expense_aggregate!
  id: bigint!

  """An array relationship"""
  performance_schedules(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): [app_performance_schedule!]!

  """An aggregate relationship"""
  performance_schedules_aggregate(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): app_performance_schedule_aggregate!

  """An array relationship"""
  show_schedules(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): [app_show_schedule!]!

  """An aggregate relationship"""
  show_schedules_aggregate(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): app_show_schedule_aggregate!
  status_type: app_deal_status_type_enum!

  """An array relationship"""
  ticket_scalings(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): [app_ticket_scaling!]!

  """An aggregate relationship"""
  ticket_scalings_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): app_ticket_scaling_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "app.deal"
"""
type app_deal_aggregate {
  aggregate: app_deal_aggregate_fields
  nodes: [app_deal!]!
}

"""
aggregate fields of "app.deal"
"""
type app_deal_aggregate_fields {
  avg: app_deal_avg_fields
  count(columns: [app_deal_select_column!], distinct: Boolean): Int!
  max: app_deal_max_fields
  min: app_deal_min_fields
  stddev: app_deal_stddev_fields
  stddev_pop: app_deal_stddev_pop_fields
  stddev_samp: app_deal_stddev_samp_fields
  sum: app_deal_sum_fields
  var_pop: app_deal_var_pop_fields
  var_samp: app_deal_var_samp_fields
  variance: app_deal_variance_fields
}

"""
order by aggregate values of table "app.deal"
"""
input app_deal_aggregate_order_by {
  avg: app_deal_avg_order_by
  count: order_by
  max: app_deal_max_order_by
  min: app_deal_min_order_by
  stddev: app_deal_stddev_order_by
  stddev_pop: app_deal_stddev_pop_order_by
  stddev_samp: app_deal_stddev_samp_order_by
  sum: app_deal_sum_order_by
  var_pop: app_deal_var_pop_order_by
  var_samp: app_deal_var_samp_order_by
  variance: app_deal_variance_order_by
}

"""
input type for inserting array relation for remote table "app.deal"
"""
input app_deal_arr_rel_insert_input {
  data: [app_deal_insert_input!]!

  """upsert condition"""
  on_conflict: app_deal_on_conflict
}

"""aggregate avg on columns"""
type app_deal_avg_fields {
  artist_id: Float
  id: Float
}

"""
order by avg() on columns of table "app.deal"
"""
input app_deal_avg_order_by {
  artist_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "app.deal". All fields are combined with a logical 'AND'.
"""
input app_deal_bool_exp {
  _and: [app_deal_bool_exp!]
  _not: app_deal_bool_exp
  _or: [app_deal_bool_exp!]
  artist: app_artist_bool_exp
  artist_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  deal_event_billing_type: app_deal_event_billing_type_bool_exp
  deal_event_type: app_deal_event_type_bool_exp
  deal_status_type: app_deal_status_type_bool_exp
  deal_venues: app_deal_venue_bool_exp
  event_billing_type: String_comparison_exp
  event_type: String_comparison_exp
  events: app_deal_event_bool_exp
  expenses: app_expense_bool_exp
  id: bigint_comparison_exp
  performance_schedules: app_performance_schedule_bool_exp
  show_schedules: app_show_schedule_bool_exp
  status_type: app_deal_status_type_enum_comparison_exp
  ticket_scalings: app_ticket_scaling_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.deal"
"""
enum app_deal_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  deal_pkey
}

"""
columns and relationships of "app.deal_event"
"""
type app_deal_event {
  """An object relationship"""
  buyer: app_person
  buyer_id: bigint

  """An object relationship"""
  copromoter: app_person
  copromoter_id: bigint
  created_at: timestamptz!
  date: timestamptz

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  id: bigint!
  updated_at: timestamptz!

  """An object relationship"""
  venue: app_venue
  venue_id: bigint
}

"""
aggregated selection of "app.deal_event"
"""
type app_deal_event_aggregate {
  aggregate: app_deal_event_aggregate_fields
  nodes: [app_deal_event!]!
}

"""
aggregate fields of "app.deal_event"
"""
type app_deal_event_aggregate_fields {
  avg: app_deal_event_avg_fields
  count(columns: [app_deal_event_select_column!], distinct: Boolean): Int!
  max: app_deal_event_max_fields
  min: app_deal_event_min_fields
  stddev: app_deal_event_stddev_fields
  stddev_pop: app_deal_event_stddev_pop_fields
  stddev_samp: app_deal_event_stddev_samp_fields
  sum: app_deal_event_sum_fields
  var_pop: app_deal_event_var_pop_fields
  var_samp: app_deal_event_var_samp_fields
  variance: app_deal_event_variance_fields
}

"""
order by aggregate values of table "app.deal_event"
"""
input app_deal_event_aggregate_order_by {
  avg: app_deal_event_avg_order_by
  count: order_by
  max: app_deal_event_max_order_by
  min: app_deal_event_min_order_by
  stddev: app_deal_event_stddev_order_by
  stddev_pop: app_deal_event_stddev_pop_order_by
  stddev_samp: app_deal_event_stddev_samp_order_by
  sum: app_deal_event_sum_order_by
  var_pop: app_deal_event_var_pop_order_by
  var_samp: app_deal_event_var_samp_order_by
  variance: app_deal_event_variance_order_by
}

"""
input type for inserting array relation for remote table "app.deal_event"
"""
input app_deal_event_arr_rel_insert_input {
  data: [app_deal_event_insert_input!]!

  """upsert condition"""
  on_conflict: app_deal_event_on_conflict
}

"""aggregate avg on columns"""
type app_deal_event_avg_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by avg() on columns of table "app.deal_event"
"""
input app_deal_event_avg_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
columns and relationships of "app.deal_event_billing_type"
"""
type app_deal_event_billing_type {
  comment: String

  """An array relationship"""
  deals(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """An aggregate relationship"""
  deals_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!
  value: String!
}

"""
aggregated selection of "app.deal_event_billing_type"
"""
type app_deal_event_billing_type_aggregate {
  aggregate: app_deal_event_billing_type_aggregate_fields
  nodes: [app_deal_event_billing_type!]!
}

"""
aggregate fields of "app.deal_event_billing_type"
"""
type app_deal_event_billing_type_aggregate_fields {
  count(columns: [app_deal_event_billing_type_select_column!], distinct: Boolean): Int!
  max: app_deal_event_billing_type_max_fields
  min: app_deal_event_billing_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.deal_event_billing_type". All fields are combined with a logical 'AND'.
"""
input app_deal_event_billing_type_bool_exp {
  _and: [app_deal_event_billing_type_bool_exp!]
  _not: app_deal_event_billing_type_bool_exp
  _or: [app_deal_event_billing_type_bool_exp!]
  comment: String_comparison_exp
  deals: app_deal_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_event_billing_type"
"""
enum app_deal_event_billing_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  deal_event_billing_type_pkey
}

"""
input type for inserting data into table "app.deal_event_billing_type"
"""
input app_deal_event_billing_type_insert_input {
  comment: String
  deals: app_deal_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type app_deal_event_billing_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type app_deal_event_billing_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "app.deal_event_billing_type"
"""
type app_deal_event_billing_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_event_billing_type!]!
}

"""
input type for inserting object relation for remote table "app.deal_event_billing_type"
"""
input app_deal_event_billing_type_obj_rel_insert_input {
  data: app_deal_event_billing_type_insert_input!

  """upsert condition"""
  on_conflict: app_deal_event_billing_type_on_conflict
}

"""
on_conflict condition type for table "app.deal_event_billing_type"
"""
input app_deal_event_billing_type_on_conflict {
  constraint: app_deal_event_billing_type_constraint!
  update_columns: [app_deal_event_billing_type_update_column!]! = []
  where: app_deal_event_billing_type_bool_exp
}

"""
Ordering options when selecting data from "app.deal_event_billing_type".
"""
input app_deal_event_billing_type_order_by {
  comment: order_by
  deals_aggregate: app_deal_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: app_deal_event_billing_type"""
input app_deal_event_billing_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.deal_event_billing_type"
"""
enum app_deal_event_billing_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "app.deal_event_billing_type"
"""
input app_deal_event_billing_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "app.deal_event_billing_type"
"""
enum app_deal_event_billing_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
Boolean expression to filter rows from the table "app.deal_event". All fields are combined with a logical 'AND'.
"""
input app_deal_event_bool_exp {
  _and: [app_deal_event_bool_exp!]
  _not: app_deal_event_bool_exp
  _or: [app_deal_event_bool_exp!]
  buyer: app_person_bool_exp
  buyer_id: bigint_comparison_exp
  copromoter: app_person_bool_exp
  copromoter_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  date: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  venue: app_venue_bool_exp
  venue_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_event"
"""
enum app_deal_event_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  deal_event_pkey
}

"""
input type for incrementing numeric columns in table "app.deal_event"
"""
input app_deal_event_inc_input {
  buyer_id: bigint
  copromoter_id: bigint
  deal_id: bigint
  id: bigint
  venue_id: bigint
}

"""
input type for inserting data into table "app.deal_event"
"""
input app_deal_event_insert_input {
  buyer: app_person_obj_rel_insert_input
  buyer_id: bigint
  copromoter: app_person_obj_rel_insert_input
  copromoter_id: bigint
  created_at: timestamptz
  date: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue: app_venue_obj_rel_insert_input
  venue_id: bigint
}

"""aggregate max on columns"""
type app_deal_event_max_fields {
  buyer_id: bigint
  copromoter_id: bigint
  created_at: timestamptz
  date: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""
order by max() on columns of table "app.deal_event"
"""
input app_deal_event_max_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  created_at: order_by
  date: order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue_id: order_by
}

"""aggregate min on columns"""
type app_deal_event_min_fields {
  buyer_id: bigint
  copromoter_id: bigint
  created_at: timestamptz
  date: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""
order by min() on columns of table "app.deal_event"
"""
input app_deal_event_min_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  created_at: order_by
  date: order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue_id: order_by
}

"""
response of any mutation on the table "app.deal_event"
"""
type app_deal_event_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_event!]!
}

"""
on_conflict condition type for table "app.deal_event"
"""
input app_deal_event_on_conflict {
  constraint: app_deal_event_constraint!
  update_columns: [app_deal_event_update_column!]! = []
  where: app_deal_event_bool_exp
}

"""Ordering options when selecting data from "app.deal_event"."""
input app_deal_event_order_by {
  buyer: app_person_order_by
  buyer_id: order_by
  copromoter: app_person_order_by
  copromoter_id: order_by
  created_at: order_by
  date: order_by
  deal: app_deal_order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue: app_venue_order_by
  venue_id: order_by
}

"""primary key columns input for table: app_deal_event"""
input app_deal_event_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.deal_event"
"""
enum app_deal_event_select_column {
  """column name"""
  buyer_id

  """column name"""
  copromoter_id

  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  venue_id
}

"""
input type for updating data in table "app.deal_event"
"""
input app_deal_event_set_input {
  buyer_id: bigint
  copromoter_id: bigint
  created_at: timestamptz
  date: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""aggregate stddev on columns"""
type app_deal_event_stddev_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev() on columns of table "app.deal_event"
"""
input app_deal_event_stddev_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate stddev_pop on columns"""
type app_deal_event_stddev_pop_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev_pop() on columns of table "app.deal_event"
"""
input app_deal_event_stddev_pop_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate stddev_samp on columns"""
type app_deal_event_stddev_samp_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev_samp() on columns of table "app.deal_event"
"""
input app_deal_event_stddev_samp_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate sum on columns"""
type app_deal_event_sum_fields {
  buyer_id: bigint
  copromoter_id: bigint
  deal_id: bigint
  id: bigint
  venue_id: bigint
}

"""
order by sum() on columns of table "app.deal_event"
"""
input app_deal_event_sum_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
columns and relationships of "app.deal_event_type"
"""
type app_deal_event_type {
  comment: String

  """An array relationship"""
  deals(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """An aggregate relationship"""
  deals_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!
  value: String!
}

"""
aggregated selection of "app.deal_event_type"
"""
type app_deal_event_type_aggregate {
  aggregate: app_deal_event_type_aggregate_fields
  nodes: [app_deal_event_type!]!
}

"""
aggregate fields of "app.deal_event_type"
"""
type app_deal_event_type_aggregate_fields {
  count(columns: [app_deal_event_type_select_column!], distinct: Boolean): Int!
  max: app_deal_event_type_max_fields
  min: app_deal_event_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.deal_event_type". All fields are combined with a logical 'AND'.
"""
input app_deal_event_type_bool_exp {
  _and: [app_deal_event_type_bool_exp!]
  _not: app_deal_event_type_bool_exp
  _or: [app_deal_event_type_bool_exp!]
  comment: String_comparison_exp
  deals: app_deal_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_event_type"
"""
enum app_deal_event_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  deal_event_type_pkey
}

"""
input type for inserting data into table "app.deal_event_type"
"""
input app_deal_event_type_insert_input {
  comment: String
  deals: app_deal_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type app_deal_event_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type app_deal_event_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "app.deal_event_type"
"""
type app_deal_event_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_event_type!]!
}

"""
input type for inserting object relation for remote table "app.deal_event_type"
"""
input app_deal_event_type_obj_rel_insert_input {
  data: app_deal_event_type_insert_input!

  """upsert condition"""
  on_conflict: app_deal_event_type_on_conflict
}

"""
on_conflict condition type for table "app.deal_event_type"
"""
input app_deal_event_type_on_conflict {
  constraint: app_deal_event_type_constraint!
  update_columns: [app_deal_event_type_update_column!]! = []
  where: app_deal_event_type_bool_exp
}

"""Ordering options when selecting data from "app.deal_event_type"."""
input app_deal_event_type_order_by {
  comment: order_by
  deals_aggregate: app_deal_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: app_deal_event_type"""
input app_deal_event_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.deal_event_type"
"""
enum app_deal_event_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "app.deal_event_type"
"""
input app_deal_event_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "app.deal_event_type"
"""
enum app_deal_event_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
update columns of table "app.deal_event"
"""
enum app_deal_event_update_column {
  """column name"""
  buyer_id

  """column name"""
  copromoter_id

  """column name"""
  created_at

  """column name"""
  date

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  venue_id
}

"""aggregate var_pop on columns"""
type app_deal_event_var_pop_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by var_pop() on columns of table "app.deal_event"
"""
input app_deal_event_var_pop_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate var_samp on columns"""
type app_deal_event_var_samp_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by var_samp() on columns of table "app.deal_event"
"""
input app_deal_event_var_samp_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate variance on columns"""
type app_deal_event_variance_fields {
  buyer_id: Float
  copromoter_id: Float
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by variance() on columns of table "app.deal_event"
"""
input app_deal_event_variance_order_by {
  buyer_id: order_by
  copromoter_id: order_by
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
input type for incrementing numeric columns in table "app.deal"
"""
input app_deal_inc_input {
  artist_id: bigint
  id: bigint
}

"""
input type for inserting data into table "app.deal"
"""
input app_deal_insert_input {
  artist: app_artist_obj_rel_insert_input
  artist_id: bigint
  created_at: timestamptz
  deal_event_billing_type: app_deal_event_billing_type_obj_rel_insert_input
  deal_event_type: app_deal_event_type_obj_rel_insert_input
  deal_status_type: app_deal_status_type_obj_rel_insert_input
  deal_venues: app_deal_venue_arr_rel_insert_input
  event_billing_type: String
  event_type: String
  events: app_deal_event_arr_rel_insert_input
  expenses: app_expense_arr_rel_insert_input
  id: bigint
  performance_schedules: app_performance_schedule_arr_rel_insert_input
  show_schedules: app_show_schedule_arr_rel_insert_input
  status_type: app_deal_status_type_enum
  ticket_scalings: app_ticket_scaling_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_deal_max_fields {
  artist_id: bigint
  created_at: timestamptz
  event_billing_type: String
  event_type: String
  id: bigint
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.deal"
"""
input app_deal_max_order_by {
  artist_id: order_by
  created_at: order_by
  event_billing_type: order_by
  event_type: order_by
  id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_deal_min_fields {
  artist_id: bigint
  created_at: timestamptz
  event_billing_type: String
  event_type: String
  id: bigint
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.deal"
"""
input app_deal_min_order_by {
  artist_id: order_by
  created_at: order_by
  event_billing_type: order_by
  event_type: order_by
  id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.deal"
"""
type app_deal_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal!]!
}

"""
input type for inserting object relation for remote table "app.deal"
"""
input app_deal_obj_rel_insert_input {
  data: app_deal_insert_input!

  """upsert condition"""
  on_conflict: app_deal_on_conflict
}

"""
on_conflict condition type for table "app.deal"
"""
input app_deal_on_conflict {
  constraint: app_deal_constraint!
  update_columns: [app_deal_update_column!]! = []
  where: app_deal_bool_exp
}

"""Ordering options when selecting data from "app.deal"."""
input app_deal_order_by {
  artist: app_artist_order_by
  artist_id: order_by
  created_at: order_by
  deal_event_billing_type: app_deal_event_billing_type_order_by
  deal_event_type: app_deal_event_type_order_by
  deal_status_type: app_deal_status_type_order_by
  deal_venues_aggregate: app_deal_venue_aggregate_order_by
  event_billing_type: order_by
  event_type: order_by
  events_aggregate: app_deal_event_aggregate_order_by
  expenses_aggregate: app_expense_aggregate_order_by
  id: order_by
  performance_schedules_aggregate: app_performance_schedule_aggregate_order_by
  show_schedules_aggregate: app_show_schedule_aggregate_order_by
  status_type: order_by
  ticket_scalings_aggregate: app_ticket_scaling_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: app_deal"""
input app_deal_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.deal"
"""
enum app_deal_select_column {
  """column name"""
  artist_id

  """column name"""
  created_at

  """column name"""
  event_billing_type

  """column name"""
  event_type

  """column name"""
  id

  """column name"""
  status_type

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.deal"
"""
input app_deal_set_input {
  artist_id: bigint
  created_at: timestamptz
  event_billing_type: String
  event_type: String
  id: bigint
  status_type: app_deal_status_type_enum
  updated_at: timestamptz
}

"""
columns and relationships of "app.deal_status_type"
"""
type app_deal_status_type {
  comment: String

  """An array relationship"""
  deals(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """An aggregate relationship"""
  deals_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!
  value: String!
}

"""
aggregated selection of "app.deal_status_type"
"""
type app_deal_status_type_aggregate {
  aggregate: app_deal_status_type_aggregate_fields
  nodes: [app_deal_status_type!]!
}

"""
aggregate fields of "app.deal_status_type"
"""
type app_deal_status_type_aggregate_fields {
  count(columns: [app_deal_status_type_select_column!], distinct: Boolean): Int!
  max: app_deal_status_type_max_fields
  min: app_deal_status_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.deal_status_type". All fields are combined with a logical 'AND'.
"""
input app_deal_status_type_bool_exp {
  _and: [app_deal_status_type_bool_exp!]
  _not: app_deal_status_type_bool_exp
  _or: [app_deal_status_type_bool_exp!]
  comment: String_comparison_exp
  deals: app_deal_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_status_type"
"""
enum app_deal_status_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  deal_status_type_pkey
}

enum app_deal_status_type_enum {
  """Confirmed"""
  CONFIRMED

  """Pending"""
  PENDING
}

"""
Boolean expression to compare columns of type "app_deal_status_type_enum". All fields are combined with logical 'AND'.
"""
input app_deal_status_type_enum_comparison_exp {
  _eq: app_deal_status_type_enum
  _in: [app_deal_status_type_enum!]
  _is_null: Boolean
  _neq: app_deal_status_type_enum
  _nin: [app_deal_status_type_enum!]
}

"""
input type for inserting data into table "app.deal_status_type"
"""
input app_deal_status_type_insert_input {
  comment: String
  deals: app_deal_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type app_deal_status_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type app_deal_status_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "app.deal_status_type"
"""
type app_deal_status_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_status_type!]!
}

"""
input type for inserting object relation for remote table "app.deal_status_type"
"""
input app_deal_status_type_obj_rel_insert_input {
  data: app_deal_status_type_insert_input!

  """upsert condition"""
  on_conflict: app_deal_status_type_on_conflict
}

"""
on_conflict condition type for table "app.deal_status_type"
"""
input app_deal_status_type_on_conflict {
  constraint: app_deal_status_type_constraint!
  update_columns: [app_deal_status_type_update_column!]! = []
  where: app_deal_status_type_bool_exp
}

"""Ordering options when selecting data from "app.deal_status_type"."""
input app_deal_status_type_order_by {
  comment: order_by
  deals_aggregate: app_deal_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: app_deal_status_type"""
input app_deal_status_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.deal_status_type"
"""
enum app_deal_status_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "app.deal_status_type"
"""
input app_deal_status_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "app.deal_status_type"
"""
enum app_deal_status_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""aggregate stddev on columns"""
type app_deal_stddev_fields {
  artist_id: Float
  id: Float
}

"""
order by stddev() on columns of table "app.deal"
"""
input app_deal_stddev_order_by {
  artist_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type app_deal_stddev_pop_fields {
  artist_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "app.deal"
"""
input app_deal_stddev_pop_order_by {
  artist_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type app_deal_stddev_samp_fields {
  artist_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "app.deal"
"""
input app_deal_stddev_samp_order_by {
  artist_id: order_by
  id: order_by
}

"""
columns and relationships of "app.deal_structure"
"""
type app_deal_structure {
  created_at: timestamptz!

  """An object relationship"""
  dealStructureTypeByDealStructureType: app_deal_structure_type
  deal_structure_type: String
  description: String
  id: bigint!
  name: String
  updated_at: timestamptz!
}

"""
aggregated selection of "app.deal_structure"
"""
type app_deal_structure_aggregate {
  aggregate: app_deal_structure_aggregate_fields
  nodes: [app_deal_structure!]!
}

"""
aggregate fields of "app.deal_structure"
"""
type app_deal_structure_aggregate_fields {
  avg: app_deal_structure_avg_fields
  count(columns: [app_deal_structure_select_column!], distinct: Boolean): Int!
  max: app_deal_structure_max_fields
  min: app_deal_structure_min_fields
  stddev: app_deal_structure_stddev_fields
  stddev_pop: app_deal_structure_stddev_pop_fields
  stddev_samp: app_deal_structure_stddev_samp_fields
  sum: app_deal_structure_sum_fields
  var_pop: app_deal_structure_var_pop_fields
  var_samp: app_deal_structure_var_samp_fields
  variance: app_deal_structure_variance_fields
}

"""
order by aggregate values of table "app.deal_structure"
"""
input app_deal_structure_aggregate_order_by {
  avg: app_deal_structure_avg_order_by
  count: order_by
  max: app_deal_structure_max_order_by
  min: app_deal_structure_min_order_by
  stddev: app_deal_structure_stddev_order_by
  stddev_pop: app_deal_structure_stddev_pop_order_by
  stddev_samp: app_deal_structure_stddev_samp_order_by
  sum: app_deal_structure_sum_order_by
  var_pop: app_deal_structure_var_pop_order_by
  var_samp: app_deal_structure_var_samp_order_by
  variance: app_deal_structure_variance_order_by
}

"""
input type for inserting array relation for remote table "app.deal_structure"
"""
input app_deal_structure_arr_rel_insert_input {
  data: [app_deal_structure_insert_input!]!

  """upsert condition"""
  on_conflict: app_deal_structure_on_conflict
}

"""aggregate avg on columns"""
type app_deal_structure_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "app.deal_structure"
"""
input app_deal_structure_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "app.deal_structure". All fields are combined with a logical 'AND'.
"""
input app_deal_structure_bool_exp {
  _and: [app_deal_structure_bool_exp!]
  _not: app_deal_structure_bool_exp
  _or: [app_deal_structure_bool_exp!]
  created_at: timestamptz_comparison_exp
  dealStructureTypeByDealStructureType: app_deal_structure_type_bool_exp
  deal_structure_type: String_comparison_exp
  description: String_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_structure"
"""
enum app_deal_structure_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  deal_structure_pkey
}

"""
input type for incrementing numeric columns in table "app.deal_structure"
"""
input app_deal_structure_inc_input {
  id: bigint
}

"""
input type for inserting data into table "app.deal_structure"
"""
input app_deal_structure_insert_input {
  created_at: timestamptz
  dealStructureTypeByDealStructureType: app_deal_structure_type_obj_rel_insert_input
  deal_structure_type: String
  description: String
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_deal_structure_max_fields {
  created_at: timestamptz
  deal_structure_type: String
  description: String
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.deal_structure"
"""
input app_deal_structure_max_order_by {
  created_at: order_by
  deal_structure_type: order_by
  description: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_deal_structure_min_fields {
  created_at: timestamptz
  deal_structure_type: String
  description: String
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.deal_structure"
"""
input app_deal_structure_min_order_by {
  created_at: order_by
  deal_structure_type: order_by
  description: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.deal_structure"
"""
type app_deal_structure_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_structure!]!
}

"""
on_conflict condition type for table "app.deal_structure"
"""
input app_deal_structure_on_conflict {
  constraint: app_deal_structure_constraint!
  update_columns: [app_deal_structure_update_column!]! = []
  where: app_deal_structure_bool_exp
}

"""Ordering options when selecting data from "app.deal_structure"."""
input app_deal_structure_order_by {
  created_at: order_by
  dealStructureTypeByDealStructureType: app_deal_structure_type_order_by
  deal_structure_type: order_by
  description: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_deal_structure"""
input app_deal_structure_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.deal_structure"
"""
enum app_deal_structure_select_column {
  """column name"""
  created_at

  """column name"""
  deal_structure_type

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.deal_structure"
"""
input app_deal_structure_set_input {
  created_at: timestamptz
  deal_structure_type: String
  description: String
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_deal_structure_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "app.deal_structure"
"""
input app_deal_structure_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type app_deal_structure_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "app.deal_structure"
"""
input app_deal_structure_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type app_deal_structure_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "app.deal_structure"
"""
input app_deal_structure_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type app_deal_structure_sum_fields {
  id: bigint
}

"""
order by sum() on columns of table "app.deal_structure"
"""
input app_deal_structure_sum_order_by {
  id: order_by
}

"""
columns and relationships of "app.deal_structure_type"
"""
type app_deal_structure_type {
  comment: String

  """An array relationship"""
  deal_structures(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): [app_deal_structure!]!

  """An aggregate relationship"""
  deal_structures_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): app_deal_structure_aggregate!
  description: String
  value: String!
}

"""
aggregated selection of "app.deal_structure_type"
"""
type app_deal_structure_type_aggregate {
  aggregate: app_deal_structure_type_aggregate_fields
  nodes: [app_deal_structure_type!]!
}

"""
aggregate fields of "app.deal_structure_type"
"""
type app_deal_structure_type_aggregate_fields {
  count(columns: [app_deal_structure_type_select_column!], distinct: Boolean): Int!
  max: app_deal_structure_type_max_fields
  min: app_deal_structure_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.deal_structure_type". All fields are combined with a logical 'AND'.
"""
input app_deal_structure_type_bool_exp {
  _and: [app_deal_structure_type_bool_exp!]
  _not: app_deal_structure_type_bool_exp
  _or: [app_deal_structure_type_bool_exp!]
  comment: String_comparison_exp
  deal_structures: app_deal_structure_bool_exp
  description: String_comparison_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_structure_type"
"""
enum app_deal_structure_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  deal_structure_type_pkey
}

"""
input type for inserting data into table "app.deal_structure_type"
"""
input app_deal_structure_type_insert_input {
  comment: String
  deal_structures: app_deal_structure_arr_rel_insert_input
  description: String
  value: String
}

"""aggregate max on columns"""
type app_deal_structure_type_max_fields {
  comment: String
  description: String
  value: String
}

"""aggregate min on columns"""
type app_deal_structure_type_min_fields {
  comment: String
  description: String
  value: String
}

"""
response of any mutation on the table "app.deal_structure_type"
"""
type app_deal_structure_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_structure_type!]!
}

"""
input type for inserting object relation for remote table "app.deal_structure_type"
"""
input app_deal_structure_type_obj_rel_insert_input {
  data: app_deal_structure_type_insert_input!

  """upsert condition"""
  on_conflict: app_deal_structure_type_on_conflict
}

"""
on_conflict condition type for table "app.deal_structure_type"
"""
input app_deal_structure_type_on_conflict {
  constraint: app_deal_structure_type_constraint!
  update_columns: [app_deal_structure_type_update_column!]! = []
  where: app_deal_structure_type_bool_exp
}

"""Ordering options when selecting data from "app.deal_structure_type"."""
input app_deal_structure_type_order_by {
  comment: order_by
  deal_structures_aggregate: app_deal_structure_aggregate_order_by
  description: order_by
  value: order_by
}

"""primary key columns input for table: app_deal_structure_type"""
input app_deal_structure_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.deal_structure_type"
"""
enum app_deal_structure_type_select_column {
  """column name"""
  comment

  """column name"""
  description

  """column name"""
  value
}

"""
input type for updating data in table "app.deal_structure_type"
"""
input app_deal_structure_type_set_input {
  comment: String
  description: String
  value: String
}

"""
update columns of table "app.deal_structure_type"
"""
enum app_deal_structure_type_update_column {
  """column name"""
  comment

  """column name"""
  description

  """column name"""
  value
}

"""
update columns of table "app.deal_structure"
"""
enum app_deal_structure_update_column {
  """column name"""
  created_at

  """column name"""
  deal_structure_type

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_deal_structure_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "app.deal_structure"
"""
input app_deal_structure_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type app_deal_structure_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "app.deal_structure"
"""
input app_deal_structure_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type app_deal_structure_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "app.deal_structure"
"""
input app_deal_structure_variance_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type app_deal_sum_fields {
  artist_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "app.deal"
"""
input app_deal_sum_order_by {
  artist_id: order_by
  id: order_by
}

"""
update columns of table "app.deal"
"""
enum app_deal_update_column {
  """column name"""
  artist_id

  """column name"""
  created_at

  """column name"""
  event_billing_type

  """column name"""
  event_type

  """column name"""
  id

  """column name"""
  status_type

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_deal_var_pop_fields {
  artist_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "app.deal"
"""
input app_deal_var_pop_order_by {
  artist_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type app_deal_var_samp_fields {
  artist_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "app.deal"
"""
input app_deal_var_samp_order_by {
  artist_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type app_deal_variance_fields {
  artist_id: Float
  id: Float
}

"""
order by variance() on columns of table "app.deal"
"""
input app_deal_variance_order_by {
  artist_id: order_by
  id: order_by
}

"""
columns and relationships of "app.deal_venue"
"""
type app_deal_venue {
  created_at: timestamptz!
  date_end: timestamptz!
  date_start: timestamptz!

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  id: bigint!
  updated_at: timestamptz!

  """An object relationship"""
  venue: app_venue!
  venue_id: bigint!
}

"""
aggregated selection of "app.deal_venue"
"""
type app_deal_venue_aggregate {
  aggregate: app_deal_venue_aggregate_fields
  nodes: [app_deal_venue!]!
}

"""
aggregate fields of "app.deal_venue"
"""
type app_deal_venue_aggregate_fields {
  avg: app_deal_venue_avg_fields
  count(columns: [app_deal_venue_select_column!], distinct: Boolean): Int!
  max: app_deal_venue_max_fields
  min: app_deal_venue_min_fields
  stddev: app_deal_venue_stddev_fields
  stddev_pop: app_deal_venue_stddev_pop_fields
  stddev_samp: app_deal_venue_stddev_samp_fields
  sum: app_deal_venue_sum_fields
  var_pop: app_deal_venue_var_pop_fields
  var_samp: app_deal_venue_var_samp_fields
  variance: app_deal_venue_variance_fields
}

"""
order by aggregate values of table "app.deal_venue"
"""
input app_deal_venue_aggregate_order_by {
  avg: app_deal_venue_avg_order_by
  count: order_by
  max: app_deal_venue_max_order_by
  min: app_deal_venue_min_order_by
  stddev: app_deal_venue_stddev_order_by
  stddev_pop: app_deal_venue_stddev_pop_order_by
  stddev_samp: app_deal_venue_stddev_samp_order_by
  sum: app_deal_venue_sum_order_by
  var_pop: app_deal_venue_var_pop_order_by
  var_samp: app_deal_venue_var_samp_order_by
  variance: app_deal_venue_variance_order_by
}

"""
input type for inserting array relation for remote table "app.deal_venue"
"""
input app_deal_venue_arr_rel_insert_input {
  data: [app_deal_venue_insert_input!]!

  """upsert condition"""
  on_conflict: app_deal_venue_on_conflict
}

"""aggregate avg on columns"""
type app_deal_venue_avg_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by avg() on columns of table "app.deal_venue"
"""
input app_deal_venue_avg_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
Boolean expression to filter rows from the table "app.deal_venue". All fields are combined with a logical 'AND'.
"""
input app_deal_venue_bool_exp {
  _and: [app_deal_venue_bool_exp!]
  _not: app_deal_venue_bool_exp
  _or: [app_deal_venue_bool_exp!]
  created_at: timestamptz_comparison_exp
  date_end: timestamptz_comparison_exp
  date_start: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  venue: app_venue_bool_exp
  venue_id: bigint_comparison_exp
}

"""
unique or primary key constraints on table "app.deal_venue"
"""
enum app_deal_venue_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  deal_venue_pkey
}

"""
input type for incrementing numeric columns in table "app.deal_venue"
"""
input app_deal_venue_inc_input {
  deal_id: bigint
  id: bigint
  venue_id: bigint
}

"""
input type for inserting data into table "app.deal_venue"
"""
input app_deal_venue_insert_input {
  created_at: timestamptz
  date_end: timestamptz
  date_start: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue: app_venue_obj_rel_insert_input
  venue_id: bigint
}

"""aggregate max on columns"""
type app_deal_venue_max_fields {
  created_at: timestamptz
  date_end: timestamptz
  date_start: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""
order by max() on columns of table "app.deal_venue"
"""
input app_deal_venue_max_order_by {
  created_at: order_by
  date_end: order_by
  date_start: order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue_id: order_by
}

"""aggregate min on columns"""
type app_deal_venue_min_fields {
  created_at: timestamptz
  date_end: timestamptz
  date_start: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""
order by min() on columns of table "app.deal_venue"
"""
input app_deal_venue_min_order_by {
  created_at: order_by
  date_end: order_by
  date_start: order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue_id: order_by
}

"""
response of any mutation on the table "app.deal_venue"
"""
type app_deal_venue_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_deal_venue!]!
}

"""
on_conflict condition type for table "app.deal_venue"
"""
input app_deal_venue_on_conflict {
  constraint: app_deal_venue_constraint!
  update_columns: [app_deal_venue_update_column!]! = []
  where: app_deal_venue_bool_exp
}

"""Ordering options when selecting data from "app.deal_venue"."""
input app_deal_venue_order_by {
  created_at: order_by
  date_end: order_by
  date_start: order_by
  deal: app_deal_order_by
  deal_id: order_by
  id: order_by
  updated_at: order_by
  venue: app_venue_order_by
  venue_id: order_by
}

"""primary key columns input for table: app_deal_venue"""
input app_deal_venue_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.deal_venue"
"""
enum app_deal_venue_select_column {
  """column name"""
  created_at

  """column name"""
  date_end

  """column name"""
  date_start

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  venue_id
}

"""
input type for updating data in table "app.deal_venue"
"""
input app_deal_venue_set_input {
  created_at: timestamptz
  date_end: timestamptz
  date_start: timestamptz
  deal_id: bigint
  id: bigint
  updated_at: timestamptz
  venue_id: bigint
}

"""aggregate stddev on columns"""
type app_deal_venue_stddev_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev() on columns of table "app.deal_venue"
"""
input app_deal_venue_stddev_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate stddev_pop on columns"""
type app_deal_venue_stddev_pop_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev_pop() on columns of table "app.deal_venue"
"""
input app_deal_venue_stddev_pop_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate stddev_samp on columns"""
type app_deal_venue_stddev_samp_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by stddev_samp() on columns of table "app.deal_venue"
"""
input app_deal_venue_stddev_samp_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate sum on columns"""
type app_deal_venue_sum_fields {
  deal_id: bigint
  id: bigint
  venue_id: bigint
}

"""
order by sum() on columns of table "app.deal_venue"
"""
input app_deal_venue_sum_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
update columns of table "app.deal_venue"
"""
enum app_deal_venue_update_column {
  """column name"""
  created_at

  """column name"""
  date_end

  """column name"""
  date_start

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  venue_id
}

"""aggregate var_pop on columns"""
type app_deal_venue_var_pop_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by var_pop() on columns of table "app.deal_venue"
"""
input app_deal_venue_var_pop_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate var_samp on columns"""
type app_deal_venue_var_samp_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by var_samp() on columns of table "app.deal_venue"
"""
input app_deal_venue_var_samp_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""aggregate variance on columns"""
type app_deal_venue_variance_fields {
  deal_id: Float
  id: Float
  venue_id: Float
}

"""
order by variance() on columns of table "app.deal_venue"
"""
input app_deal_venue_variance_order_by {
  deal_id: order_by
  id: order_by
  venue_id: order_by
}

"""
columns and relationships of "app.expense"
"""
type app_expense {
  cost: Int
  created_at: timestamptz!

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  expense_type: app_expense_type_enum
  id: bigint!
  maximum: Int
  name: String
  notes: String
  sort_order: String

  """An object relationship"""
  type: app_expense_type
  updated_at: timestamptz!
}

"""
aggregated selection of "app.expense"
"""
type app_expense_aggregate {
  aggregate: app_expense_aggregate_fields
  nodes: [app_expense!]!
}

"""
aggregate fields of "app.expense"
"""
type app_expense_aggregate_fields {
  avg: app_expense_avg_fields
  count(columns: [app_expense_select_column!], distinct: Boolean): Int!
  max: app_expense_max_fields
  min: app_expense_min_fields
  stddev: app_expense_stddev_fields
  stddev_pop: app_expense_stddev_pop_fields
  stddev_samp: app_expense_stddev_samp_fields
  sum: app_expense_sum_fields
  var_pop: app_expense_var_pop_fields
  var_samp: app_expense_var_samp_fields
  variance: app_expense_variance_fields
}

"""
order by aggregate values of table "app.expense"
"""
input app_expense_aggregate_order_by {
  avg: app_expense_avg_order_by
  count: order_by
  max: app_expense_max_order_by
  min: app_expense_min_order_by
  stddev: app_expense_stddev_order_by
  stddev_pop: app_expense_stddev_pop_order_by
  stddev_samp: app_expense_stddev_samp_order_by
  sum: app_expense_sum_order_by
  var_pop: app_expense_var_pop_order_by
  var_samp: app_expense_var_samp_order_by
  variance: app_expense_variance_order_by
}

"""
input type for inserting array relation for remote table "app.expense"
"""
input app_expense_arr_rel_insert_input {
  data: [app_expense_insert_input!]!

  """upsert condition"""
  on_conflict: app_expense_on_conflict
}

"""aggregate avg on columns"""
type app_expense_avg_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by avg() on columns of table "app.expense"
"""
input app_expense_avg_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""
Boolean expression to filter rows from the table "app.expense". All fields are combined with a logical 'AND'.
"""
input app_expense_bool_exp {
  _and: [app_expense_bool_exp!]
  _not: app_expense_bool_exp
  _or: [app_expense_bool_exp!]
  cost: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  expense_type: app_expense_type_enum_comparison_exp
  id: bigint_comparison_exp
  maximum: Int_comparison_exp
  name: String_comparison_exp
  notes: String_comparison_exp
  sort_order: String_comparison_exp
  type: app_expense_type_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.expense"
"""
enum app_expense_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  expense_pkey
}

"""
input type for incrementing numeric columns in table "app.expense"
"""
input app_expense_inc_input {
  cost: Int
  deal_id: bigint
  id: bigint
  maximum: Int
}

"""
input type for inserting data into table "app.expense"
"""
input app_expense_insert_input {
  cost: Int
  created_at: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  expense_type: app_expense_type_enum
  id: bigint
  maximum: Int
  name: String
  notes: String
  sort_order: String
  type: app_expense_type_obj_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_expense_max_fields {
  cost: Int
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  maximum: Int
  name: String
  notes: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.expense"
"""
input app_expense_max_order_by {
  cost: order_by
  created_at: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
  name: order_by
  notes: order_by
  sort_order: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_expense_min_fields {
  cost: Int
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  maximum: Int
  name: String
  notes: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.expense"
"""
input app_expense_min_order_by {
  cost: order_by
  created_at: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
  name: order_by
  notes: order_by
  sort_order: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.expense"
"""
type app_expense_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_expense!]!
}

"""
on_conflict condition type for table "app.expense"
"""
input app_expense_on_conflict {
  constraint: app_expense_constraint!
  update_columns: [app_expense_update_column!]! = []
  where: app_expense_bool_exp
}

"""Ordering options when selecting data from "app.expense"."""
input app_expense_order_by {
  cost: order_by
  created_at: order_by
  deal: app_deal_order_by
  deal_id: order_by
  expense_type: order_by
  id: order_by
  maximum: order_by
  name: order_by
  notes: order_by
  sort_order: order_by
  type: app_expense_type_order_by
  updated_at: order_by
}

"""primary key columns input for table: app_expense"""
input app_expense_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.expense"
"""
enum app_expense_select_column {
  """column name"""
  cost

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  expense_type

  """column name"""
  id

  """column name"""
  maximum

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  sort_order

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.expense"
"""
input app_expense_set_input {
  cost: Int
  created_at: timestamptz
  deal_id: bigint
  expense_type: app_expense_type_enum
  id: bigint
  maximum: Int
  name: String
  notes: String
  sort_order: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_expense_stddev_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by stddev() on columns of table "app.expense"
"""
input app_expense_stddev_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""aggregate stddev_pop on columns"""
type app_expense_stddev_pop_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by stddev_pop() on columns of table "app.expense"
"""
input app_expense_stddev_pop_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""aggregate stddev_samp on columns"""
type app_expense_stddev_samp_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by stddev_samp() on columns of table "app.expense"
"""
input app_expense_stddev_samp_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""aggregate sum on columns"""
type app_expense_sum_fields {
  cost: Int
  deal_id: bigint
  id: bigint
  maximum: Int
}

"""
order by sum() on columns of table "app.expense"
"""
input app_expense_sum_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""
columns and relationships of "app.expense_type"
"""
type app_expense_type {
  comment: String

  """An array relationship"""
  expenses(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): [app_expense!]!

  """An aggregate relationship"""
  expenses_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): app_expense_aggregate!
  value: String!
}

"""
aggregated selection of "app.expense_type"
"""
type app_expense_type_aggregate {
  aggregate: app_expense_type_aggregate_fields
  nodes: [app_expense_type!]!
}

"""
aggregate fields of "app.expense_type"
"""
type app_expense_type_aggregate_fields {
  count(columns: [app_expense_type_select_column!], distinct: Boolean): Int!
  max: app_expense_type_max_fields
  min: app_expense_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.expense_type". All fields are combined with a logical 'AND'.
"""
input app_expense_type_bool_exp {
  _and: [app_expense_type_bool_exp!]
  _not: app_expense_type_bool_exp
  _or: [app_expense_type_bool_exp!]
  comment: String_comparison_exp
  expenses: app_expense_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.expense_type"
"""
enum app_expense_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  expense_type_pkey
}

enum app_expense_type_enum {
  """Flat Cost"""
  FLAT_COST

  """Percentage Cost"""
  PERCENTAGE_COST

  """Per Ticket Cost"""
  PER_TICKET_COST
}

"""
Boolean expression to compare columns of type "app_expense_type_enum". All fields are combined with logical 'AND'.
"""
input app_expense_type_enum_comparison_exp {
  _eq: app_expense_type_enum
  _in: [app_expense_type_enum!]
  _is_null: Boolean
  _neq: app_expense_type_enum
  _nin: [app_expense_type_enum!]
}

"""
input type for inserting data into table "app.expense_type"
"""
input app_expense_type_insert_input {
  comment: String
  expenses: app_expense_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type app_expense_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type app_expense_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "app.expense_type"
"""
type app_expense_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_expense_type!]!
}

"""
input type for inserting object relation for remote table "app.expense_type"
"""
input app_expense_type_obj_rel_insert_input {
  data: app_expense_type_insert_input!

  """upsert condition"""
  on_conflict: app_expense_type_on_conflict
}

"""
on_conflict condition type for table "app.expense_type"
"""
input app_expense_type_on_conflict {
  constraint: app_expense_type_constraint!
  update_columns: [app_expense_type_update_column!]! = []
  where: app_expense_type_bool_exp
}

"""Ordering options when selecting data from "app.expense_type"."""
input app_expense_type_order_by {
  comment: order_by
  expenses_aggregate: app_expense_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: app_expense_type"""
input app_expense_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.expense_type"
"""
enum app_expense_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "app.expense_type"
"""
input app_expense_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "app.expense_type"
"""
enum app_expense_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
update columns of table "app.expense"
"""
enum app_expense_update_column {
  """column name"""
  cost

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  expense_type

  """column name"""
  id

  """column name"""
  maximum

  """column name"""
  name

  """column name"""
  notes

  """column name"""
  sort_order

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_expense_var_pop_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by var_pop() on columns of table "app.expense"
"""
input app_expense_var_pop_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""aggregate var_samp on columns"""
type app_expense_var_samp_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by var_samp() on columns of table "app.expense"
"""
input app_expense_var_samp_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""aggregate variance on columns"""
type app_expense_variance_fields {
  cost: Float
  deal_id: Float
  id: Float
  maximum: Float
}

"""
order by variance() on columns of table "app.expense"
"""
input app_expense_variance_order_by {
  cost: order_by
  deal_id: order_by
  id: order_by
  maximum: order_by
}

"""
columns and relationships of "app.performance_schedule"
"""
type app_performance_schedule {
  artist_name: String
  created_at: timestamptz!

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  id: bigint!
  notes: String
  set_length: interval
  sort_order: String
  start_time: time
  updated_at: timestamptz!
}

"""
aggregated selection of "app.performance_schedule"
"""
type app_performance_schedule_aggregate {
  aggregate: app_performance_schedule_aggregate_fields
  nodes: [app_performance_schedule!]!
}

"""
aggregate fields of "app.performance_schedule"
"""
type app_performance_schedule_aggregate_fields {
  avg: app_performance_schedule_avg_fields
  count(columns: [app_performance_schedule_select_column!], distinct: Boolean): Int!
  max: app_performance_schedule_max_fields
  min: app_performance_schedule_min_fields
  stddev: app_performance_schedule_stddev_fields
  stddev_pop: app_performance_schedule_stddev_pop_fields
  stddev_samp: app_performance_schedule_stddev_samp_fields
  sum: app_performance_schedule_sum_fields
  var_pop: app_performance_schedule_var_pop_fields
  var_samp: app_performance_schedule_var_samp_fields
  variance: app_performance_schedule_variance_fields
}

"""
order by aggregate values of table "app.performance_schedule"
"""
input app_performance_schedule_aggregate_order_by {
  avg: app_performance_schedule_avg_order_by
  count: order_by
  max: app_performance_schedule_max_order_by
  min: app_performance_schedule_min_order_by
  stddev: app_performance_schedule_stddev_order_by
  stddev_pop: app_performance_schedule_stddev_pop_order_by
  stddev_samp: app_performance_schedule_stddev_samp_order_by
  sum: app_performance_schedule_sum_order_by
  var_pop: app_performance_schedule_var_pop_order_by
  var_samp: app_performance_schedule_var_samp_order_by
  variance: app_performance_schedule_variance_order_by
}

"""
input type for inserting array relation for remote table "app.performance_schedule"
"""
input app_performance_schedule_arr_rel_insert_input {
  data: [app_performance_schedule_insert_input!]!

  """upsert condition"""
  on_conflict: app_performance_schedule_on_conflict
}

"""aggregate avg on columns"""
type app_performance_schedule_avg_fields {
  deal_id: Float
  id: Float
}

"""
order by avg() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_avg_order_by {
  deal_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "app.performance_schedule". All fields are combined with a logical 'AND'.
"""
input app_performance_schedule_bool_exp {
  _and: [app_performance_schedule_bool_exp!]
  _not: app_performance_schedule_bool_exp
  _or: [app_performance_schedule_bool_exp!]
  artist_name: String_comparison_exp
  created_at: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  notes: String_comparison_exp
  set_length: interval_comparison_exp
  sort_order: String_comparison_exp
  start_time: time_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.performance_schedule"
"""
enum app_performance_schedule_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  performance_schedule_pkey
}

"""
input type for incrementing numeric columns in table "app.performance_schedule"
"""
input app_performance_schedule_inc_input {
  deal_id: bigint
  id: bigint
}

"""
input type for inserting data into table "app.performance_schedule"
"""
input app_performance_schedule_insert_input {
  artist_name: String
  created_at: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  id: bigint
  notes: String
  set_length: interval
  sort_order: String
  start_time: time
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_performance_schedule_max_fields {
  artist_name: String
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_max_order_by {
  artist_name: order_by
  created_at: order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  sort_order: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_performance_schedule_min_fields {
  artist_name: String
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_min_order_by {
  artist_name: order_by
  created_at: order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  sort_order: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.performance_schedule"
"""
type app_performance_schedule_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_performance_schedule!]!
}

"""
on_conflict condition type for table "app.performance_schedule"
"""
input app_performance_schedule_on_conflict {
  constraint: app_performance_schedule_constraint!
  update_columns: [app_performance_schedule_update_column!]! = []
  where: app_performance_schedule_bool_exp
}

"""Ordering options when selecting data from "app.performance_schedule"."""
input app_performance_schedule_order_by {
  artist_name: order_by
  created_at: order_by
  deal: app_deal_order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  set_length: order_by
  sort_order: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_performance_schedule"""
input app_performance_schedule_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.performance_schedule"
"""
enum app_performance_schedule_select_column {
  """column name"""
  artist_name

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  set_length

  """column name"""
  sort_order

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.performance_schedule"
"""
input app_performance_schedule_set_input {
  artist_name: String
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  set_length: interval
  sort_order: String
  start_time: time
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_performance_schedule_stddev_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_stddev_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type app_performance_schedule_stddev_pop_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_stddev_pop_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type app_performance_schedule_stddev_samp_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_stddev_samp_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type app_performance_schedule_sum_fields {
  deal_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_sum_order_by {
  deal_id: order_by
  id: order_by
}

"""
update columns of table "app.performance_schedule"
"""
enum app_performance_schedule_update_column {
  """column name"""
  artist_name

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  set_length

  """column name"""
  sort_order

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_performance_schedule_var_pop_fields {
  deal_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_var_pop_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type app_performance_schedule_var_samp_fields {
  deal_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_var_samp_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type app_performance_schedule_variance_fields {
  deal_id: Float
  id: Float
}

"""
order by variance() on columns of table "app.performance_schedule"
"""
input app_performance_schedule_variance_order_by {
  deal_id: order_by
  id: order_by
}

"""
Any person who is not an application user (ex. promoter, band member, manager, etc.).
"""
type app_person {
  created_at: timestamptz!

  """An array relationship"""
  dealEventsByCopromoterId(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """An aggregate relationship"""
  dealEventsByCopromoterId_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!

  """An array relationship"""
  deal_events(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """An aggregate relationship"""
  deal_events_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!
  id: bigint!

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "app.person"
"""
type app_person_aggregate {
  aggregate: app_person_aggregate_fields
  nodes: [app_person!]!
}

"""
aggregate fields of "app.person"
"""
type app_person_aggregate_fields {
  avg: app_person_avg_fields
  count(columns: [app_person_select_column!], distinct: Boolean): Int!
  max: app_person_max_fields
  min: app_person_min_fields
  stddev: app_person_stddev_fields
  stddev_pop: app_person_stddev_pop_fields
  stddev_samp: app_person_stddev_samp_fields
  sum: app_person_sum_fields
  var_pop: app_person_var_pop_fields
  var_samp: app_person_var_samp_fields
  variance: app_person_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input app_person_append_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""aggregate avg on columns"""
type app_person_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "app.person". All fields are combined with a logical 'AND'.
"""
input app_person_bool_exp {
  _and: [app_person_bool_exp!]
  _not: app_person_bool_exp
  _or: [app_person_bool_exp!]
  created_at: timestamptz_comparison_exp
  dealEventsByCopromoterId: app_deal_event_bool_exp
  deal_events: app_deal_event_bool_exp
  id: bigint_comparison_exp
  image: jsonb_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.person"
"""
enum app_person_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  person_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input app_person_delete_at_path_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input app_person_delete_elem_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input app_person_delete_key_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: String
}

"""
input type for incrementing numeric columns in table "app.person"
"""
input app_person_inc_input {
  id: bigint
}

"""
input type for inserting data into table "app.person"
"""
input app_person_insert_input {
  created_at: timestamptz
  dealEventsByCopromoterId: app_deal_event_arr_rel_insert_input
  deal_events: app_deal_event_arr_rel_insert_input
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_person_max_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type app_person_min_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "app.person"
"""
type app_person_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_person!]!
}

"""
input type for inserting object relation for remote table "app.person"
"""
input app_person_obj_rel_insert_input {
  data: app_person_insert_input!

  """upsert condition"""
  on_conflict: app_person_on_conflict
}

"""
on_conflict condition type for table "app.person"
"""
input app_person_on_conflict {
  constraint: app_person_constraint!
  update_columns: [app_person_update_column!]! = []
  where: app_person_bool_exp
}

"""Ordering options when selecting data from "app.person"."""
input app_person_order_by {
  created_at: order_by
  dealEventsByCopromoterId_aggregate: app_deal_event_aggregate_order_by
  deal_events_aggregate: app_deal_event_aggregate_order_by
  id: order_by
  image: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_person"""
input app_person_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input app_person_prepend_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""
select columns of table "app.person"
"""
enum app_person_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.person"
"""
input app_person_set_input {
  created_at: timestamptz
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_person_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type app_person_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type app_person_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type app_person_sum_fields {
  id: bigint
}

"""
update columns of table "app.person"
"""
enum app_person_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_person_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type app_person_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type app_person_variance_fields {
  id: Float
}

"""
columns and relationships of "app.show_schedule"
"""
type app_show_schedule {
  created_at: timestamptz!

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  id: bigint!
  notes: String
  show_schedule_type: String
  sort_order: String
  start_time: time
  updated_at: timestamptz!
}

"""
aggregated selection of "app.show_schedule"
"""
type app_show_schedule_aggregate {
  aggregate: app_show_schedule_aggregate_fields
  nodes: [app_show_schedule!]!
}

"""
aggregate fields of "app.show_schedule"
"""
type app_show_schedule_aggregate_fields {
  avg: app_show_schedule_avg_fields
  count(columns: [app_show_schedule_select_column!], distinct: Boolean): Int!
  max: app_show_schedule_max_fields
  min: app_show_schedule_min_fields
  stddev: app_show_schedule_stddev_fields
  stddev_pop: app_show_schedule_stddev_pop_fields
  stddev_samp: app_show_schedule_stddev_samp_fields
  sum: app_show_schedule_sum_fields
  var_pop: app_show_schedule_var_pop_fields
  var_samp: app_show_schedule_var_samp_fields
  variance: app_show_schedule_variance_fields
}

"""
order by aggregate values of table "app.show_schedule"
"""
input app_show_schedule_aggregate_order_by {
  avg: app_show_schedule_avg_order_by
  count: order_by
  max: app_show_schedule_max_order_by
  min: app_show_schedule_min_order_by
  stddev: app_show_schedule_stddev_order_by
  stddev_pop: app_show_schedule_stddev_pop_order_by
  stddev_samp: app_show_schedule_stddev_samp_order_by
  sum: app_show_schedule_sum_order_by
  var_pop: app_show_schedule_var_pop_order_by
  var_samp: app_show_schedule_var_samp_order_by
  variance: app_show_schedule_variance_order_by
}

"""
input type for inserting array relation for remote table "app.show_schedule"
"""
input app_show_schedule_arr_rel_insert_input {
  data: [app_show_schedule_insert_input!]!

  """upsert condition"""
  on_conflict: app_show_schedule_on_conflict
}

"""aggregate avg on columns"""
type app_show_schedule_avg_fields {
  deal_id: Float
  id: Float
}

"""
order by avg() on columns of table "app.show_schedule"
"""
input app_show_schedule_avg_order_by {
  deal_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "app.show_schedule". All fields are combined with a logical 'AND'.
"""
input app_show_schedule_bool_exp {
  _and: [app_show_schedule_bool_exp!]
  _not: app_show_schedule_bool_exp
  _or: [app_show_schedule_bool_exp!]
  created_at: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  id: bigint_comparison_exp
  notes: String_comparison_exp
  show_schedule_type: String_comparison_exp
  sort_order: String_comparison_exp
  start_time: time_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.show_schedule"
"""
enum app_show_schedule_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  show_schedule_pkey
}

"""
input type for incrementing numeric columns in table "app.show_schedule"
"""
input app_show_schedule_inc_input {
  deal_id: bigint
  id: bigint
}

"""
input type for inserting data into table "app.show_schedule"
"""
input app_show_schedule_insert_input {
  created_at: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  id: bigint
  notes: String
  show_schedule_type: String
  sort_order: String
  start_time: time
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_show_schedule_max_fields {
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  show_schedule_type: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.show_schedule"
"""
input app_show_schedule_max_order_by {
  created_at: order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  show_schedule_type: order_by
  sort_order: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_show_schedule_min_fields {
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  show_schedule_type: String
  sort_order: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.show_schedule"
"""
input app_show_schedule_min_order_by {
  created_at: order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  show_schedule_type: order_by
  sort_order: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.show_schedule"
"""
type app_show_schedule_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_show_schedule!]!
}

"""
on_conflict condition type for table "app.show_schedule"
"""
input app_show_schedule_on_conflict {
  constraint: app_show_schedule_constraint!
  update_columns: [app_show_schedule_update_column!]! = []
  where: app_show_schedule_bool_exp
}

"""Ordering options when selecting data from "app.show_schedule"."""
input app_show_schedule_order_by {
  created_at: order_by
  deal: app_deal_order_by
  deal_id: order_by
  id: order_by
  notes: order_by
  show_schedule_type: order_by
  sort_order: order_by
  start_time: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_show_schedule"""
input app_show_schedule_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.show_schedule"
"""
enum app_show_schedule_select_column {
  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  show_schedule_type

  """column name"""
  sort_order

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.show_schedule"
"""
input app_show_schedule_set_input {
  created_at: timestamptz
  deal_id: bigint
  id: bigint
  notes: String
  show_schedule_type: String
  sort_order: String
  start_time: time
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_show_schedule_stddev_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev() on columns of table "app.show_schedule"
"""
input app_show_schedule_stddev_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type app_show_schedule_stddev_pop_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "app.show_schedule"
"""
input app_show_schedule_stddev_pop_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type app_show_schedule_stddev_samp_fields {
  deal_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "app.show_schedule"
"""
input app_show_schedule_stddev_samp_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type app_show_schedule_sum_fields {
  deal_id: bigint
  id: bigint
}

"""
order by sum() on columns of table "app.show_schedule"
"""
input app_show_schedule_sum_order_by {
  deal_id: order_by
  id: order_by
}

"""
update columns of table "app.show_schedule"
"""
enum app_show_schedule_update_column {
  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  id

  """column name"""
  notes

  """column name"""
  show_schedule_type

  """column name"""
  sort_order

  """column name"""
  start_time

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_show_schedule_var_pop_fields {
  deal_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "app.show_schedule"
"""
input app_show_schedule_var_pop_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type app_show_schedule_var_samp_fields {
  deal_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "app.show_schedule"
"""
input app_show_schedule_var_samp_order_by {
  deal_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type app_show_schedule_variance_fields {
  deal_id: Float
  id: Float
}

"""
order by variance() on columns of table "app.show_schedule"
"""
input app_show_schedule_variance_order_by {
  deal_id: order_by
  id: order_by
}

"""
columns and relationships of "app.ticket_scaling"
"""
type app_ticket_scaling {
  capacity: Int
  charity: Int
  complimentary: Int
  created_at: timestamptz!

  """An object relationship"""
  deal: app_deal!
  deal_id: bigint!
  facility: Int
  id: bigint!
  kills: Int
  notes: String
  other: Int
  price: Int
  secondary: Int
  sort_order: String
  ticket_type: app_ticket_type_enum

  """An object relationship"""
  type: app_ticket_type
  updated_at: timestamptz!
}

"""
aggregated selection of "app.ticket_scaling"
"""
type app_ticket_scaling_aggregate {
  aggregate: app_ticket_scaling_aggregate_fields
  nodes: [app_ticket_scaling!]!
}

"""
aggregate fields of "app.ticket_scaling"
"""
type app_ticket_scaling_aggregate_fields {
  avg: app_ticket_scaling_avg_fields
  count(columns: [app_ticket_scaling_select_column!], distinct: Boolean): Int!
  max: app_ticket_scaling_max_fields
  min: app_ticket_scaling_min_fields
  stddev: app_ticket_scaling_stddev_fields
  stddev_pop: app_ticket_scaling_stddev_pop_fields
  stddev_samp: app_ticket_scaling_stddev_samp_fields
  sum: app_ticket_scaling_sum_fields
  var_pop: app_ticket_scaling_var_pop_fields
  var_samp: app_ticket_scaling_var_samp_fields
  variance: app_ticket_scaling_variance_fields
}

"""
order by aggregate values of table "app.ticket_scaling"
"""
input app_ticket_scaling_aggregate_order_by {
  avg: app_ticket_scaling_avg_order_by
  count: order_by
  max: app_ticket_scaling_max_order_by
  min: app_ticket_scaling_min_order_by
  stddev: app_ticket_scaling_stddev_order_by
  stddev_pop: app_ticket_scaling_stddev_pop_order_by
  stddev_samp: app_ticket_scaling_stddev_samp_order_by
  sum: app_ticket_scaling_sum_order_by
  var_pop: app_ticket_scaling_var_pop_order_by
  var_samp: app_ticket_scaling_var_samp_order_by
  variance: app_ticket_scaling_variance_order_by
}

"""
input type for inserting array relation for remote table "app.ticket_scaling"
"""
input app_ticket_scaling_arr_rel_insert_input {
  data: [app_ticket_scaling_insert_input!]!

  """upsert condition"""
  on_conflict: app_ticket_scaling_on_conflict
}

"""aggregate avg on columns"""
type app_ticket_scaling_avg_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by avg() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_avg_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""
Boolean expression to filter rows from the table "app.ticket_scaling". All fields are combined with a logical 'AND'.
"""
input app_ticket_scaling_bool_exp {
  _and: [app_ticket_scaling_bool_exp!]
  _not: app_ticket_scaling_bool_exp
  _or: [app_ticket_scaling_bool_exp!]
  capacity: Int_comparison_exp
  charity: Int_comparison_exp
  complimentary: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  deal: app_deal_bool_exp
  deal_id: bigint_comparison_exp
  facility: Int_comparison_exp
  id: bigint_comparison_exp
  kills: Int_comparison_exp
  notes: String_comparison_exp
  other: Int_comparison_exp
  price: Int_comparison_exp
  secondary: Int_comparison_exp
  sort_order: String_comparison_exp
  ticket_type: app_ticket_type_enum_comparison_exp
  type: app_ticket_type_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.ticket_scaling"
"""
enum app_ticket_scaling_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  ticket_scaling_pkey
}

"""
input type for incrementing numeric columns in table "app.ticket_scaling"
"""
input app_ticket_scaling_inc_input {
  capacity: Int
  charity: Int
  complimentary: Int
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  other: Int
  price: Int
  secondary: Int
}

"""
input type for inserting data into table "app.ticket_scaling"
"""
input app_ticket_scaling_insert_input {
  capacity: Int
  charity: Int
  complimentary: Int
  created_at: timestamptz
  deal: app_deal_obj_rel_insert_input
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  notes: String
  other: Int
  price: Int
  secondary: Int
  sort_order: String
  ticket_type: app_ticket_type_enum
  type: app_ticket_type_obj_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_ticket_scaling_max_fields {
  capacity: Int
  charity: Int
  complimentary: Int
  created_at: timestamptz
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  notes: String
  other: Int
  price: Int
  secondary: Int
  sort_order: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_max_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  created_at: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  notes: order_by
  other: order_by
  price: order_by
  secondary: order_by
  sort_order: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type app_ticket_scaling_min_fields {
  capacity: Int
  charity: Int
  complimentary: Int
  created_at: timestamptz
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  notes: String
  other: Int
  price: Int
  secondary: Int
  sort_order: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_min_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  created_at: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  notes: order_by
  other: order_by
  price: order_by
  secondary: order_by
  sort_order: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "app.ticket_scaling"
"""
type app_ticket_scaling_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_ticket_scaling!]!
}

"""
on_conflict condition type for table "app.ticket_scaling"
"""
input app_ticket_scaling_on_conflict {
  constraint: app_ticket_scaling_constraint!
  update_columns: [app_ticket_scaling_update_column!]! = []
  where: app_ticket_scaling_bool_exp
}

"""Ordering options when selecting data from "app.ticket_scaling"."""
input app_ticket_scaling_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  created_at: order_by
  deal: app_deal_order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  notes: order_by
  other: order_by
  price: order_by
  secondary: order_by
  sort_order: order_by
  ticket_type: order_by
  type: app_ticket_type_order_by
  updated_at: order_by
}

"""primary key columns input for table: app_ticket_scaling"""
input app_ticket_scaling_pk_columns_input {
  id: bigint!
}

"""
select columns of table "app.ticket_scaling"
"""
enum app_ticket_scaling_select_column {
  """column name"""
  capacity

  """column name"""
  charity

  """column name"""
  complimentary

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  facility

  """column name"""
  id

  """column name"""
  kills

  """column name"""
  notes

  """column name"""
  other

  """column name"""
  price

  """column name"""
  secondary

  """column name"""
  sort_order

  """column name"""
  ticket_type

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.ticket_scaling"
"""
input app_ticket_scaling_set_input {
  capacity: Int
  charity: Int
  complimentary: Int
  created_at: timestamptz
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  notes: String
  other: Int
  price: Int
  secondary: Int
  sort_order: String
  ticket_type: app_ticket_type_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_ticket_scaling_stddev_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by stddev() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_stddev_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""aggregate stddev_pop on columns"""
type app_ticket_scaling_stddev_pop_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by stddev_pop() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_stddev_pop_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""aggregate stddev_samp on columns"""
type app_ticket_scaling_stddev_samp_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by stddev_samp() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_stddev_samp_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""aggregate sum on columns"""
type app_ticket_scaling_sum_fields {
  capacity: Int
  charity: Int
  complimentary: Int
  deal_id: bigint
  facility: Int
  id: bigint
  kills: Int
  other: Int
  price: Int
  secondary: Int
}

"""
order by sum() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_sum_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""
update columns of table "app.ticket_scaling"
"""
enum app_ticket_scaling_update_column {
  """column name"""
  capacity

  """column name"""
  charity

  """column name"""
  complimentary

  """column name"""
  created_at

  """column name"""
  deal_id

  """column name"""
  facility

  """column name"""
  id

  """column name"""
  kills

  """column name"""
  notes

  """column name"""
  other

  """column name"""
  price

  """column name"""
  secondary

  """column name"""
  sort_order

  """column name"""
  ticket_type

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_ticket_scaling_var_pop_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by var_pop() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_var_pop_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""aggregate var_samp on columns"""
type app_ticket_scaling_var_samp_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by var_samp() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_var_samp_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""aggregate variance on columns"""
type app_ticket_scaling_variance_fields {
  capacity: Float
  charity: Float
  complimentary: Float
  deal_id: Float
  facility: Float
  id: Float
  kills: Float
  other: Float
  price: Float
  secondary: Float
}

"""
order by variance() on columns of table "app.ticket_scaling"
"""
input app_ticket_scaling_variance_order_by {
  capacity: order_by
  charity: order_by
  complimentary: order_by
  deal_id: order_by
  facility: order_by
  id: order_by
  kills: order_by
  other: order_by
  price: order_by
  secondary: order_by
}

"""
columns and relationships of "app.ticket_type"
"""
type app_ticket_type {
  comment: String

  """An array relationship"""
  ticket_scalings(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): [app_ticket_scaling!]!

  """An aggregate relationship"""
  ticket_scalings_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): app_ticket_scaling_aggregate!
  value: String!
}

"""
aggregated selection of "app.ticket_type"
"""
type app_ticket_type_aggregate {
  aggregate: app_ticket_type_aggregate_fields
  nodes: [app_ticket_type!]!
}

"""
aggregate fields of "app.ticket_type"
"""
type app_ticket_type_aggregate_fields {
  count(columns: [app_ticket_type_select_column!], distinct: Boolean): Int!
  max: app_ticket_type_max_fields
  min: app_ticket_type_min_fields
}

"""
Boolean expression to filter rows from the table "app.ticket_type". All fields are combined with a logical 'AND'.
"""
input app_ticket_type_bool_exp {
  _and: [app_ticket_type_bool_exp!]
  _not: app_ticket_type_bool_exp
  _or: [app_ticket_type_bool_exp!]
  comment: String_comparison_exp
  ticket_scalings: app_ticket_scaling_bool_exp
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "app.ticket_type"
"""
enum app_ticket_type_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  ticket_type_pkey
}

enum app_ticket_type_enum {
  """Auction"""
  AUCTION

  """Balcony"""
  BALCONY

  """Bundle"""
  BUNDLE

  """Fan Club"""
  FAN_CLUB

  """GA Seated"""
  GA_SEATED

  """GA Standing"""
  GA_STANDING

  """Lawn"""
  LAWN

  """Loge"""
  LOGE

  """Lower Level"""
  LOWER_LEVEL

  """Mezzanine"""
  MEZZANINE

  """Orchestra"""
  ORCHESTRA

  """Other"""
  OTHER

  """Pit"""
  PIT

  """Reserved"""
  RESERVED

  """Unknown"""
  UNKNOWN

  """Upper Level"""
  UPPER_LEVEL

  """VIP Gold Circle"""
  VIP_GOLD_CIRCLE

  """VIP Seated"""
  VIP_SEATED

  """VIP Standing"""
  VIP_STANDING
}

"""
Boolean expression to compare columns of type "app_ticket_type_enum". All fields are combined with logical 'AND'.
"""
input app_ticket_type_enum_comparison_exp {
  _eq: app_ticket_type_enum
  _in: [app_ticket_type_enum!]
  _is_null: Boolean
  _neq: app_ticket_type_enum
  _nin: [app_ticket_type_enum!]
}

"""
input type for inserting data into table "app.ticket_type"
"""
input app_ticket_type_insert_input {
  comment: String
  ticket_scalings: app_ticket_scaling_arr_rel_insert_input
  value: String
}

"""aggregate max on columns"""
type app_ticket_type_max_fields {
  comment: String
  value: String
}

"""aggregate min on columns"""
type app_ticket_type_min_fields {
  comment: String
  value: String
}

"""
response of any mutation on the table "app.ticket_type"
"""
type app_ticket_type_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_ticket_type!]!
}

"""
input type for inserting object relation for remote table "app.ticket_type"
"""
input app_ticket_type_obj_rel_insert_input {
  data: app_ticket_type_insert_input!

  """upsert condition"""
  on_conflict: app_ticket_type_on_conflict
}

"""
on_conflict condition type for table "app.ticket_type"
"""
input app_ticket_type_on_conflict {
  constraint: app_ticket_type_constraint!
  update_columns: [app_ticket_type_update_column!]! = []
  where: app_ticket_type_bool_exp
}

"""Ordering options when selecting data from "app.ticket_type"."""
input app_ticket_type_order_by {
  comment: order_by
  ticket_scalings_aggregate: app_ticket_scaling_aggregate_order_by
  value: order_by
}

"""primary key columns input for table: app_ticket_type"""
input app_ticket_type_pk_columns_input {
  value: String!
}

"""
select columns of table "app.ticket_type"
"""
enum app_ticket_type_select_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
input type for updating data in table "app.ticket_type"
"""
input app_ticket_type_set_input {
  comment: String
  value: String
}

"""
update columns of table "app.ticket_type"
"""
enum app_ticket_type_update_column {
  """column name"""
  comment

  """column name"""
  value
}

"""
columns and relationships of "app.venue"
"""
type app_venue {
  created_at: timestamptz!

  """An array relationship"""
  deal_events(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """An aggregate relationship"""
  deal_events_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!

  """An array relationship"""
  deal_venues(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): [app_deal_venue!]!

  """An aggregate relationship"""
  deal_venues_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): app_deal_venue_aggregate!
  id: bigint!

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "app.venue"
"""
type app_venue_aggregate {
  aggregate: app_venue_aggregate_fields
  nodes: [app_venue!]!
}

"""
aggregate fields of "app.venue"
"""
type app_venue_aggregate_fields {
  avg: app_venue_avg_fields
  count(columns: [app_venue_select_column!], distinct: Boolean): Int!
  max: app_venue_max_fields
  min: app_venue_min_fields
  stddev: app_venue_stddev_fields
  stddev_pop: app_venue_stddev_pop_fields
  stddev_samp: app_venue_stddev_samp_fields
  sum: app_venue_sum_fields
  var_pop: app_venue_var_pop_fields
  var_samp: app_venue_var_samp_fields
  variance: app_venue_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input app_venue_append_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""aggregate avg on columns"""
type app_venue_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "app.venue". All fields are combined with a logical 'AND'.
"""
input app_venue_bool_exp {
  _and: [app_venue_bool_exp!]
  _not: app_venue_bool_exp
  _or: [app_venue_bool_exp!]
  created_at: timestamptz_comparison_exp
  deal_events: app_deal_event_bool_exp
  deal_venues: app_deal_venue_bool_exp
  id: bigint_comparison_exp
  image: jsonb_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "app.venue"
"""
enum app_venue_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  venue_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input app_venue_delete_at_path_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input app_venue_delete_elem_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input app_venue_delete_key_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: String
}

"""
input type for incrementing numeric columns in table "app.venue"
"""
input app_venue_inc_input {
  id: bigint
}

"""
input type for inserting data into table "app.venue"
"""
input app_venue_insert_input {
  created_at: timestamptz
  deal_events: app_deal_event_arr_rel_insert_input
  deal_venues: app_deal_venue_arr_rel_insert_input
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type app_venue_max_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type app_venue_min_fields {
  created_at: timestamptz
  id: bigint
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "app.venue"
"""
type app_venue_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [app_venue!]!
}

"""
input type for inserting object relation for remote table "app.venue"
"""
input app_venue_obj_rel_insert_input {
  data: app_venue_insert_input!

  """upsert condition"""
  on_conflict: app_venue_on_conflict
}

"""
on_conflict condition type for table "app.venue"
"""
input app_venue_on_conflict {
  constraint: app_venue_constraint!
  update_columns: [app_venue_update_column!]! = []
  where: app_venue_bool_exp
}

"""Ordering options when selecting data from "app.venue"."""
input app_venue_order_by {
  created_at: order_by
  deal_events_aggregate: app_deal_event_aggregate_order_by
  deal_venues_aggregate: app_deal_venue_aggregate_order_by
  id: order_by
  image: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: app_venue"""
input app_venue_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input app_venue_prepend_input {
  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
}

"""
select columns of table "app.venue"
"""
enum app_venue_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "app.venue"
"""
input app_venue_set_input {
  created_at: timestamptz
  id: bigint

  """
  A JSON object of the format {url: string, width: number, height: number}
  """
  image: jsonb
  name: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type app_venue_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type app_venue_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type app_venue_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type app_venue_sum_fields {
  id: bigint
}

"""
update columns of table "app.venue"
"""
enum app_venue_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type app_venue_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type app_venue_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type app_venue_variance_fields {
  id: Float
}

scalar bigint

input bigint_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _cast: bigint_cast_exp
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar interval

"""
Boolean expression to compare columns of type "interval". All fields are combined with logical 'AND'.
"""
input interval_comparison_exp {
  _eq: interval
  _gt: interval
  _gte: interval
  _in: [interval!]
  _is_null: Boolean
  _lt: interval
  _lte: interval
  _neq: interval
  _nin: [interval!]
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "app.artist"
  """
  delete_app_artist(
    """filter the rows which have to be deleted"""
    where: app_artist_bool_exp!
  ): app_artist_mutation_response

  """
  delete single row from the table: "app.artist"
  """
  delete_app_artist_by_pk(id: bigint!): app_artist

  """
  delete data from the table: "app.deal"
  """
  delete_app_deal(
    """filter the rows which have to be deleted"""
    where: app_deal_bool_exp!
  ): app_deal_mutation_response

  """
  delete single row from the table: "app.deal"
  """
  delete_app_deal_by_pk(id: bigint!): app_deal

  """
  delete data from the table: "app.deal_event"
  """
  delete_app_deal_event(
    """filter the rows which have to be deleted"""
    where: app_deal_event_bool_exp!
  ): app_deal_event_mutation_response

  """
  delete data from the table: "app.deal_event_billing_type"
  """
  delete_app_deal_event_billing_type(
    """filter the rows which have to be deleted"""
    where: app_deal_event_billing_type_bool_exp!
  ): app_deal_event_billing_type_mutation_response

  """
  delete single row from the table: "app.deal_event_billing_type"
  """
  delete_app_deal_event_billing_type_by_pk(value: String!): app_deal_event_billing_type

  """
  delete single row from the table: "app.deal_event"
  """
  delete_app_deal_event_by_pk(id: bigint!): app_deal_event

  """
  delete data from the table: "app.deal_event_type"
  """
  delete_app_deal_event_type(
    """filter the rows which have to be deleted"""
    where: app_deal_event_type_bool_exp!
  ): app_deal_event_type_mutation_response

  """
  delete single row from the table: "app.deal_event_type"
  """
  delete_app_deal_event_type_by_pk(value: String!): app_deal_event_type

  """
  delete data from the table: "app.deal_status_type"
  """
  delete_app_deal_status_type(
    """filter the rows which have to be deleted"""
    where: app_deal_status_type_bool_exp!
  ): app_deal_status_type_mutation_response

  """
  delete single row from the table: "app.deal_status_type"
  """
  delete_app_deal_status_type_by_pk(value: String!): app_deal_status_type

  """
  delete data from the table: "app.deal_structure"
  """
  delete_app_deal_structure(
    """filter the rows which have to be deleted"""
    where: app_deal_structure_bool_exp!
  ): app_deal_structure_mutation_response

  """
  delete single row from the table: "app.deal_structure"
  """
  delete_app_deal_structure_by_pk(id: bigint!): app_deal_structure

  """
  delete data from the table: "app.deal_structure_type"
  """
  delete_app_deal_structure_type(
    """filter the rows which have to be deleted"""
    where: app_deal_structure_type_bool_exp!
  ): app_deal_structure_type_mutation_response

  """
  delete single row from the table: "app.deal_structure_type"
  """
  delete_app_deal_structure_type_by_pk(value: String!): app_deal_structure_type

  """
  delete data from the table: "app.deal_venue"
  """
  delete_app_deal_venue(
    """filter the rows which have to be deleted"""
    where: app_deal_venue_bool_exp!
  ): app_deal_venue_mutation_response

  """
  delete single row from the table: "app.deal_venue"
  """
  delete_app_deal_venue_by_pk(id: bigint!): app_deal_venue

  """
  delete data from the table: "app.expense"
  """
  delete_app_expense(
    """filter the rows which have to be deleted"""
    where: app_expense_bool_exp!
  ): app_expense_mutation_response

  """
  delete single row from the table: "app.expense"
  """
  delete_app_expense_by_pk(id: bigint!): app_expense

  """
  delete data from the table: "app.expense_type"
  """
  delete_app_expense_type(
    """filter the rows which have to be deleted"""
    where: app_expense_type_bool_exp!
  ): app_expense_type_mutation_response

  """
  delete single row from the table: "app.expense_type"
  """
  delete_app_expense_type_by_pk(value: String!): app_expense_type

  """
  delete data from the table: "app.performance_schedule"
  """
  delete_app_performance_schedule(
    """filter the rows which have to be deleted"""
    where: app_performance_schedule_bool_exp!
  ): app_performance_schedule_mutation_response

  """
  delete single row from the table: "app.performance_schedule"
  """
  delete_app_performance_schedule_by_pk(id: bigint!): app_performance_schedule

  """
  delete data from the table: "app.person"
  """
  delete_app_person(
    """filter the rows which have to be deleted"""
    where: app_person_bool_exp!
  ): app_person_mutation_response

  """
  delete single row from the table: "app.person"
  """
  delete_app_person_by_pk(id: bigint!): app_person

  """
  delete data from the table: "app.show_schedule"
  """
  delete_app_show_schedule(
    """filter the rows which have to be deleted"""
    where: app_show_schedule_bool_exp!
  ): app_show_schedule_mutation_response

  """
  delete single row from the table: "app.show_schedule"
  """
  delete_app_show_schedule_by_pk(id: bigint!): app_show_schedule

  """
  delete data from the table: "app.ticket_scaling"
  """
  delete_app_ticket_scaling(
    """filter the rows which have to be deleted"""
    where: app_ticket_scaling_bool_exp!
  ): app_ticket_scaling_mutation_response

  """
  delete single row from the table: "app.ticket_scaling"
  """
  delete_app_ticket_scaling_by_pk(id: bigint!): app_ticket_scaling

  """
  delete data from the table: "app.ticket_type"
  """
  delete_app_ticket_type(
    """filter the rows which have to be deleted"""
    where: app_ticket_type_bool_exp!
  ): app_ticket_type_mutation_response

  """
  delete single row from the table: "app.ticket_type"
  """
  delete_app_ticket_type_by_pk(value: String!): app_ticket_type

  """
  delete data from the table: "app.venue"
  """
  delete_app_venue(
    """filter the rows which have to be deleted"""
    where: app_venue_bool_exp!
  ): app_venue_mutation_response

  """
  delete single row from the table: "app.venue"
  """
  delete_app_venue_by_pk(id: bigint!): app_venue

  """
  insert data into the table: "app.artist"
  """
  insert_app_artist(
    """the rows to be inserted"""
    objects: [app_artist_insert_input!]!

    """upsert condition"""
    on_conflict: app_artist_on_conflict
  ): app_artist_mutation_response

  """
  insert a single row into the table: "app.artist"
  """
  insert_app_artist_one(
    """the row to be inserted"""
    object: app_artist_insert_input!

    """upsert condition"""
    on_conflict: app_artist_on_conflict
  ): app_artist

  """
  insert data into the table: "app.deal"
  """
  insert_app_deal(
    """the rows to be inserted"""
    objects: [app_deal_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_on_conflict
  ): app_deal_mutation_response

  """
  insert data into the table: "app.deal_event"
  """
  insert_app_deal_event(
    """the rows to be inserted"""
    objects: [app_deal_event_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_event_on_conflict
  ): app_deal_event_mutation_response

  """
  insert data into the table: "app.deal_event_billing_type"
  """
  insert_app_deal_event_billing_type(
    """the rows to be inserted"""
    objects: [app_deal_event_billing_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_event_billing_type_on_conflict
  ): app_deal_event_billing_type_mutation_response

  """
  insert a single row into the table: "app.deal_event_billing_type"
  """
  insert_app_deal_event_billing_type_one(
    """the row to be inserted"""
    object: app_deal_event_billing_type_insert_input!

    """upsert condition"""
    on_conflict: app_deal_event_billing_type_on_conflict
  ): app_deal_event_billing_type

  """
  insert a single row into the table: "app.deal_event"
  """
  insert_app_deal_event_one(
    """the row to be inserted"""
    object: app_deal_event_insert_input!

    """upsert condition"""
    on_conflict: app_deal_event_on_conflict
  ): app_deal_event

  """
  insert data into the table: "app.deal_event_type"
  """
  insert_app_deal_event_type(
    """the rows to be inserted"""
    objects: [app_deal_event_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_event_type_on_conflict
  ): app_deal_event_type_mutation_response

  """
  insert a single row into the table: "app.deal_event_type"
  """
  insert_app_deal_event_type_one(
    """the row to be inserted"""
    object: app_deal_event_type_insert_input!

    """upsert condition"""
    on_conflict: app_deal_event_type_on_conflict
  ): app_deal_event_type

  """
  insert a single row into the table: "app.deal"
  """
  insert_app_deal_one(
    """the row to be inserted"""
    object: app_deal_insert_input!

    """upsert condition"""
    on_conflict: app_deal_on_conflict
  ): app_deal

  """
  insert data into the table: "app.deal_status_type"
  """
  insert_app_deal_status_type(
    """the rows to be inserted"""
    objects: [app_deal_status_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_status_type_on_conflict
  ): app_deal_status_type_mutation_response

  """
  insert a single row into the table: "app.deal_status_type"
  """
  insert_app_deal_status_type_one(
    """the row to be inserted"""
    object: app_deal_status_type_insert_input!

    """upsert condition"""
    on_conflict: app_deal_status_type_on_conflict
  ): app_deal_status_type

  """
  insert data into the table: "app.deal_structure"
  """
  insert_app_deal_structure(
    """the rows to be inserted"""
    objects: [app_deal_structure_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_structure_on_conflict
  ): app_deal_structure_mutation_response

  """
  insert a single row into the table: "app.deal_structure"
  """
  insert_app_deal_structure_one(
    """the row to be inserted"""
    object: app_deal_structure_insert_input!

    """upsert condition"""
    on_conflict: app_deal_structure_on_conflict
  ): app_deal_structure

  """
  insert data into the table: "app.deal_structure_type"
  """
  insert_app_deal_structure_type(
    """the rows to be inserted"""
    objects: [app_deal_structure_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_structure_type_on_conflict
  ): app_deal_structure_type_mutation_response

  """
  insert a single row into the table: "app.deal_structure_type"
  """
  insert_app_deal_structure_type_one(
    """the row to be inserted"""
    object: app_deal_structure_type_insert_input!

    """upsert condition"""
    on_conflict: app_deal_structure_type_on_conflict
  ): app_deal_structure_type

  """
  insert data into the table: "app.deal_venue"
  """
  insert_app_deal_venue(
    """the rows to be inserted"""
    objects: [app_deal_venue_insert_input!]!

    """upsert condition"""
    on_conflict: app_deal_venue_on_conflict
  ): app_deal_venue_mutation_response

  """
  insert a single row into the table: "app.deal_venue"
  """
  insert_app_deal_venue_one(
    """the row to be inserted"""
    object: app_deal_venue_insert_input!

    """upsert condition"""
    on_conflict: app_deal_venue_on_conflict
  ): app_deal_venue

  """
  insert data into the table: "app.expense"
  """
  insert_app_expense(
    """the rows to be inserted"""
    objects: [app_expense_insert_input!]!

    """upsert condition"""
    on_conflict: app_expense_on_conflict
  ): app_expense_mutation_response

  """
  insert a single row into the table: "app.expense"
  """
  insert_app_expense_one(
    """the row to be inserted"""
    object: app_expense_insert_input!

    """upsert condition"""
    on_conflict: app_expense_on_conflict
  ): app_expense

  """
  insert data into the table: "app.expense_type"
  """
  insert_app_expense_type(
    """the rows to be inserted"""
    objects: [app_expense_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_expense_type_on_conflict
  ): app_expense_type_mutation_response

  """
  insert a single row into the table: "app.expense_type"
  """
  insert_app_expense_type_one(
    """the row to be inserted"""
    object: app_expense_type_insert_input!

    """upsert condition"""
    on_conflict: app_expense_type_on_conflict
  ): app_expense_type

  """
  insert data into the table: "app.performance_schedule"
  """
  insert_app_performance_schedule(
    """the rows to be inserted"""
    objects: [app_performance_schedule_insert_input!]!

    """upsert condition"""
    on_conflict: app_performance_schedule_on_conflict
  ): app_performance_schedule_mutation_response

  """
  insert a single row into the table: "app.performance_schedule"
  """
  insert_app_performance_schedule_one(
    """the row to be inserted"""
    object: app_performance_schedule_insert_input!

    """upsert condition"""
    on_conflict: app_performance_schedule_on_conflict
  ): app_performance_schedule

  """
  insert data into the table: "app.person"
  """
  insert_app_person(
    """the rows to be inserted"""
    objects: [app_person_insert_input!]!

    """upsert condition"""
    on_conflict: app_person_on_conflict
  ): app_person_mutation_response

  """
  insert a single row into the table: "app.person"
  """
  insert_app_person_one(
    """the row to be inserted"""
    object: app_person_insert_input!

    """upsert condition"""
    on_conflict: app_person_on_conflict
  ): app_person

  """
  insert data into the table: "app.show_schedule"
  """
  insert_app_show_schedule(
    """the rows to be inserted"""
    objects: [app_show_schedule_insert_input!]!

    """upsert condition"""
    on_conflict: app_show_schedule_on_conflict
  ): app_show_schedule_mutation_response

  """
  insert a single row into the table: "app.show_schedule"
  """
  insert_app_show_schedule_one(
    """the row to be inserted"""
    object: app_show_schedule_insert_input!

    """upsert condition"""
    on_conflict: app_show_schedule_on_conflict
  ): app_show_schedule

  """
  insert data into the table: "app.ticket_scaling"
  """
  insert_app_ticket_scaling(
    """the rows to be inserted"""
    objects: [app_ticket_scaling_insert_input!]!

    """upsert condition"""
    on_conflict: app_ticket_scaling_on_conflict
  ): app_ticket_scaling_mutation_response

  """
  insert a single row into the table: "app.ticket_scaling"
  """
  insert_app_ticket_scaling_one(
    """the row to be inserted"""
    object: app_ticket_scaling_insert_input!

    """upsert condition"""
    on_conflict: app_ticket_scaling_on_conflict
  ): app_ticket_scaling

  """
  insert data into the table: "app.ticket_type"
  """
  insert_app_ticket_type(
    """the rows to be inserted"""
    objects: [app_ticket_type_insert_input!]!

    """upsert condition"""
    on_conflict: app_ticket_type_on_conflict
  ): app_ticket_type_mutation_response

  """
  insert a single row into the table: "app.ticket_type"
  """
  insert_app_ticket_type_one(
    """the row to be inserted"""
    object: app_ticket_type_insert_input!

    """upsert condition"""
    on_conflict: app_ticket_type_on_conflict
  ): app_ticket_type

  """
  insert data into the table: "app.venue"
  """
  insert_app_venue(
    """the rows to be inserted"""
    objects: [app_venue_insert_input!]!

    """upsert condition"""
    on_conflict: app_venue_on_conflict
  ): app_venue_mutation_response

  """
  insert a single row into the table: "app.venue"
  """
  insert_app_venue_one(
    """the row to be inserted"""
    object: app_venue_insert_input!

    """upsert condition"""
    on_conflict: app_venue_on_conflict
  ): app_venue

  """
  update data of the table: "app.artist"
  """
  update_app_artist(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_artist_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_artist_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_artist_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_artist_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_artist_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_artist_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_artist_set_input

    """filter the rows which have to be updated"""
    where: app_artist_bool_exp!
  ): app_artist_mutation_response

  """
  update single row of the table: "app.artist"
  """
  update_app_artist_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_artist_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_artist_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_artist_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_artist_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_artist_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_artist_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_artist_set_input
    pk_columns: app_artist_pk_columns_input!
  ): app_artist

  """
  update data of the table: "app.deal"
  """
  update_app_deal(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_set_input

    """filter the rows which have to be updated"""
    where: app_deal_bool_exp!
  ): app_deal_mutation_response

  """
  update single row of the table: "app.deal"
  """
  update_app_deal_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_set_input
    pk_columns: app_deal_pk_columns_input!
  ): app_deal

  """
  update data of the table: "app.deal_event"
  """
  update_app_deal_event(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_event_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_set_input

    """filter the rows which have to be updated"""
    where: app_deal_event_bool_exp!
  ): app_deal_event_mutation_response

  """
  update data of the table: "app.deal_event_billing_type"
  """
  update_app_deal_event_billing_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_billing_type_set_input

    """filter the rows which have to be updated"""
    where: app_deal_event_billing_type_bool_exp!
  ): app_deal_event_billing_type_mutation_response

  """
  update single row of the table: "app.deal_event_billing_type"
  """
  update_app_deal_event_billing_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_billing_type_set_input
    pk_columns: app_deal_event_billing_type_pk_columns_input!
  ): app_deal_event_billing_type

  """
  update single row of the table: "app.deal_event"
  """
  update_app_deal_event_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_event_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_set_input
    pk_columns: app_deal_event_pk_columns_input!
  ): app_deal_event

  """
  update data of the table: "app.deal_event_type"
  """
  update_app_deal_event_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_type_set_input

    """filter the rows which have to be updated"""
    where: app_deal_event_type_bool_exp!
  ): app_deal_event_type_mutation_response

  """
  update single row of the table: "app.deal_event_type"
  """
  update_app_deal_event_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_event_type_set_input
    pk_columns: app_deal_event_type_pk_columns_input!
  ): app_deal_event_type

  """
  update data of the table: "app.deal_status_type"
  """
  update_app_deal_status_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_status_type_set_input

    """filter the rows which have to be updated"""
    where: app_deal_status_type_bool_exp!
  ): app_deal_status_type_mutation_response

  """
  update single row of the table: "app.deal_status_type"
  """
  update_app_deal_status_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_status_type_set_input
    pk_columns: app_deal_status_type_pk_columns_input!
  ): app_deal_status_type

  """
  update data of the table: "app.deal_structure"
  """
  update_app_deal_structure(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_structure_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_structure_set_input

    """filter the rows which have to be updated"""
    where: app_deal_structure_bool_exp!
  ): app_deal_structure_mutation_response

  """
  update single row of the table: "app.deal_structure"
  """
  update_app_deal_structure_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_structure_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_structure_set_input
    pk_columns: app_deal_structure_pk_columns_input!
  ): app_deal_structure

  """
  update data of the table: "app.deal_structure_type"
  """
  update_app_deal_structure_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_structure_type_set_input

    """filter the rows which have to be updated"""
    where: app_deal_structure_type_bool_exp!
  ): app_deal_structure_type_mutation_response

  """
  update single row of the table: "app.deal_structure_type"
  """
  update_app_deal_structure_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_structure_type_set_input
    pk_columns: app_deal_structure_type_pk_columns_input!
  ): app_deal_structure_type

  """
  update data of the table: "app.deal_venue"
  """
  update_app_deal_venue(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_venue_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_venue_set_input

    """filter the rows which have to be updated"""
    where: app_deal_venue_bool_exp!
  ): app_deal_venue_mutation_response

  """
  update single row of the table: "app.deal_venue"
  """
  update_app_deal_venue_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_deal_venue_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_deal_venue_set_input
    pk_columns: app_deal_venue_pk_columns_input!
  ): app_deal_venue

  """
  update data of the table: "app.expense"
  """
  update_app_expense(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_expense_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_expense_set_input

    """filter the rows which have to be updated"""
    where: app_expense_bool_exp!
  ): app_expense_mutation_response

  """
  update single row of the table: "app.expense"
  """
  update_app_expense_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_expense_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_expense_set_input
    pk_columns: app_expense_pk_columns_input!
  ): app_expense

  """
  update data of the table: "app.expense_type"
  """
  update_app_expense_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_expense_type_set_input

    """filter the rows which have to be updated"""
    where: app_expense_type_bool_exp!
  ): app_expense_type_mutation_response

  """
  update single row of the table: "app.expense_type"
  """
  update_app_expense_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_expense_type_set_input
    pk_columns: app_expense_type_pk_columns_input!
  ): app_expense_type

  """
  update data of the table: "app.performance_schedule"
  """
  update_app_performance_schedule(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_performance_schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_performance_schedule_set_input

    """filter the rows which have to be updated"""
    where: app_performance_schedule_bool_exp!
  ): app_performance_schedule_mutation_response

  """
  update single row of the table: "app.performance_schedule"
  """
  update_app_performance_schedule_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_performance_schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_performance_schedule_set_input
    pk_columns: app_performance_schedule_pk_columns_input!
  ): app_performance_schedule

  """
  update data of the table: "app.person"
  """
  update_app_person(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_person_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_person_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_person_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_person_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_person_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_person_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_person_set_input

    """filter the rows which have to be updated"""
    where: app_person_bool_exp!
  ): app_person_mutation_response

  """
  update single row of the table: "app.person"
  """
  update_app_person_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_person_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_person_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_person_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_person_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_person_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_person_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_person_set_input
    pk_columns: app_person_pk_columns_input!
  ): app_person

  """
  update data of the table: "app.show_schedule"
  """
  update_app_show_schedule(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_show_schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_show_schedule_set_input

    """filter the rows which have to be updated"""
    where: app_show_schedule_bool_exp!
  ): app_show_schedule_mutation_response

  """
  update single row of the table: "app.show_schedule"
  """
  update_app_show_schedule_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_show_schedule_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_show_schedule_set_input
    pk_columns: app_show_schedule_pk_columns_input!
  ): app_show_schedule

  """
  update data of the table: "app.ticket_scaling"
  """
  update_app_ticket_scaling(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_ticket_scaling_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_ticket_scaling_set_input

    """filter the rows which have to be updated"""
    where: app_ticket_scaling_bool_exp!
  ): app_ticket_scaling_mutation_response

  """
  update single row of the table: "app.ticket_scaling"
  """
  update_app_ticket_scaling_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: app_ticket_scaling_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_ticket_scaling_set_input
    pk_columns: app_ticket_scaling_pk_columns_input!
  ): app_ticket_scaling

  """
  update data of the table: "app.ticket_type"
  """
  update_app_ticket_type(
    """sets the columns of the filtered rows to the given values"""
    _set: app_ticket_type_set_input

    """filter the rows which have to be updated"""
    where: app_ticket_type_bool_exp!
  ): app_ticket_type_mutation_response

  """
  update single row of the table: "app.ticket_type"
  """
  update_app_ticket_type_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: app_ticket_type_set_input
    pk_columns: app_ticket_type_pk_columns_input!
  ): app_ticket_type

  """
  update data of the table: "app.venue"
  """
  update_app_venue(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_venue_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_venue_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_venue_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_venue_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_venue_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_venue_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_venue_set_input

    """filter the rows which have to be updated"""
    where: app_venue_bool_exp!
  ): app_venue_mutation_response

  """
  update single row of the table: "app.venue"
  """
  update_app_venue_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: app_venue_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: app_venue_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: app_venue_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: app_venue_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: app_venue_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: app_venue_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: app_venue_set_input
    pk_columns: app_venue_pk_columns_input!
  ): app_venue
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "app.artist"
  """
  app_artist(
    """distinct select on columns"""
    distinct_on: [app_artist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_artist_order_by!]

    """filter the rows returned"""
    where: app_artist_bool_exp
  ): [app_artist!]!

  """
  fetch aggregated fields from the table: "app.artist"
  """
  app_artist_aggregate(
    """distinct select on columns"""
    distinct_on: [app_artist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_artist_order_by!]

    """filter the rows returned"""
    where: app_artist_bool_exp
  ): app_artist_aggregate!

  """fetch data from the table: "app.artist" using primary key columns"""
  app_artist_by_pk(id: bigint!): app_artist

  """
  fetch data from the table: "app.deal"
  """
  app_deal(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """
  fetch aggregated fields from the table: "app.deal"
  """
  app_deal_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!

  """fetch data from the table: "app.deal" using primary key columns"""
  app_deal_by_pk(id: bigint!): app_deal

  """
  fetch data from the table: "app.deal_event"
  """
  app_deal_event(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """
  fetch aggregated fields from the table: "app.deal_event"
  """
  app_deal_event_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!

  """
  fetch data from the table: "app.deal_event_billing_type"
  """
  app_deal_event_billing_type(
    """distinct select on columns"""
    distinct_on: [app_deal_event_billing_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_billing_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_billing_type_bool_exp
  ): [app_deal_event_billing_type!]!

  """
  fetch aggregated fields from the table: "app.deal_event_billing_type"
  """
  app_deal_event_billing_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_billing_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_billing_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_billing_type_bool_exp
  ): app_deal_event_billing_type_aggregate!

  """
  fetch data from the table: "app.deal_event_billing_type" using primary key columns
  """
  app_deal_event_billing_type_by_pk(value: String!): app_deal_event_billing_type

  """fetch data from the table: "app.deal_event" using primary key columns"""
  app_deal_event_by_pk(id: bigint!): app_deal_event

  """
  fetch data from the table: "app.deal_event_type"
  """
  app_deal_event_type(
    """distinct select on columns"""
    distinct_on: [app_deal_event_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_type_bool_exp
  ): [app_deal_event_type!]!

  """
  fetch aggregated fields from the table: "app.deal_event_type"
  """
  app_deal_event_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_type_bool_exp
  ): app_deal_event_type_aggregate!

  """
  fetch data from the table: "app.deal_event_type" using primary key columns
  """
  app_deal_event_type_by_pk(value: String!): app_deal_event_type

  """
  fetch data from the table: "app.deal_status_type"
  """
  app_deal_status_type(
    """distinct select on columns"""
    distinct_on: [app_deal_status_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_status_type_order_by!]

    """filter the rows returned"""
    where: app_deal_status_type_bool_exp
  ): [app_deal_status_type!]!

  """
  fetch aggregated fields from the table: "app.deal_status_type"
  """
  app_deal_status_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_status_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_status_type_order_by!]

    """filter the rows returned"""
    where: app_deal_status_type_bool_exp
  ): app_deal_status_type_aggregate!

  """
  fetch data from the table: "app.deal_status_type" using primary key columns
  """
  app_deal_status_type_by_pk(value: String!): app_deal_status_type

  """
  fetch data from the table: "app.deal_structure"
  """
  app_deal_structure(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): [app_deal_structure!]!

  """
  fetch aggregated fields from the table: "app.deal_structure"
  """
  app_deal_structure_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): app_deal_structure_aggregate!

  """
  fetch data from the table: "app.deal_structure" using primary key columns
  """
  app_deal_structure_by_pk(id: bigint!): app_deal_structure

  """
  fetch data from the table: "app.deal_structure_type"
  """
  app_deal_structure_type(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_type_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_type_bool_exp
  ): [app_deal_structure_type!]!

  """
  fetch aggregated fields from the table: "app.deal_structure_type"
  """
  app_deal_structure_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_type_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_type_bool_exp
  ): app_deal_structure_type_aggregate!

  """
  fetch data from the table: "app.deal_structure_type" using primary key columns
  """
  app_deal_structure_type_by_pk(value: String!): app_deal_structure_type

  """
  fetch data from the table: "app.deal_venue"
  """
  app_deal_venue(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): [app_deal_venue!]!

  """
  fetch aggregated fields from the table: "app.deal_venue"
  """
  app_deal_venue_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): app_deal_venue_aggregate!

  """fetch data from the table: "app.deal_venue" using primary key columns"""
  app_deal_venue_by_pk(id: bigint!): app_deal_venue

  """
  fetch data from the table: "app.expense"
  """
  app_expense(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): [app_expense!]!

  """
  fetch aggregated fields from the table: "app.expense"
  """
  app_expense_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): app_expense_aggregate!

  """fetch data from the table: "app.expense" using primary key columns"""
  app_expense_by_pk(id: bigint!): app_expense

  """
  fetch data from the table: "app.expense_type"
  """
  app_expense_type(
    """distinct select on columns"""
    distinct_on: [app_expense_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_type_order_by!]

    """filter the rows returned"""
    where: app_expense_type_bool_exp
  ): [app_expense_type!]!

  """
  fetch aggregated fields from the table: "app.expense_type"
  """
  app_expense_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_type_order_by!]

    """filter the rows returned"""
    where: app_expense_type_bool_exp
  ): app_expense_type_aggregate!

  """
  fetch data from the table: "app.expense_type" using primary key columns
  """
  app_expense_type_by_pk(value: String!): app_expense_type

  """
  fetch data from the table: "app.performance_schedule"
  """
  app_performance_schedule(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): [app_performance_schedule!]!

  """
  fetch aggregated fields from the table: "app.performance_schedule"
  """
  app_performance_schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): app_performance_schedule_aggregate!

  """
  fetch data from the table: "app.performance_schedule" using primary key columns
  """
  app_performance_schedule_by_pk(id: bigint!): app_performance_schedule

  """
  fetch data from the table: "app.person"
  """
  app_person(
    """distinct select on columns"""
    distinct_on: [app_person_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_person_order_by!]

    """filter the rows returned"""
    where: app_person_bool_exp
  ): [app_person!]!

  """
  fetch aggregated fields from the table: "app.person"
  """
  app_person_aggregate(
    """distinct select on columns"""
    distinct_on: [app_person_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_person_order_by!]

    """filter the rows returned"""
    where: app_person_bool_exp
  ): app_person_aggregate!

  """fetch data from the table: "app.person" using primary key columns"""
  app_person_by_pk(id: bigint!): app_person

  """
  fetch data from the table: "app.show_schedule"
  """
  app_show_schedule(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): [app_show_schedule!]!

  """
  fetch aggregated fields from the table: "app.show_schedule"
  """
  app_show_schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): app_show_schedule_aggregate!

  """
  fetch data from the table: "app.show_schedule" using primary key columns
  """
  app_show_schedule_by_pk(id: bigint!): app_show_schedule

  """
  fetch data from the table: "app.ticket_scaling"
  """
  app_ticket_scaling(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): [app_ticket_scaling!]!

  """
  fetch aggregated fields from the table: "app.ticket_scaling"
  """
  app_ticket_scaling_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): app_ticket_scaling_aggregate!

  """
  fetch data from the table: "app.ticket_scaling" using primary key columns
  """
  app_ticket_scaling_by_pk(id: bigint!): app_ticket_scaling

  """
  fetch data from the table: "app.ticket_type"
  """
  app_ticket_type(
    """distinct select on columns"""
    distinct_on: [app_ticket_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_type_order_by!]

    """filter the rows returned"""
    where: app_ticket_type_bool_exp
  ): [app_ticket_type!]!

  """
  fetch aggregated fields from the table: "app.ticket_type"
  """
  app_ticket_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_type_order_by!]

    """filter the rows returned"""
    where: app_ticket_type_bool_exp
  ): app_ticket_type_aggregate!

  """fetch data from the table: "app.ticket_type" using primary key columns"""
  app_ticket_type_by_pk(value: String!): app_ticket_type

  """
  fetch data from the table: "app.venue"
  """
  app_venue(
    """distinct select on columns"""
    distinct_on: [app_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_venue_order_by!]

    """filter the rows returned"""
    where: app_venue_bool_exp
  ): [app_venue!]!

  """
  fetch aggregated fields from the table: "app.venue"
  """
  app_venue_aggregate(
    """distinct select on columns"""
    distinct_on: [app_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_venue_order_by!]

    """filter the rows returned"""
    where: app_venue_bool_exp
  ): app_venue_aggregate!

  """fetch data from the table: "app.venue" using primary key columns"""
  app_venue_by_pk(id: bigint!): app_venue
}

type subscription_root {
  """
  fetch data from the table: "app.artist"
  """
  app_artist(
    """distinct select on columns"""
    distinct_on: [app_artist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_artist_order_by!]

    """filter the rows returned"""
    where: app_artist_bool_exp
  ): [app_artist!]!

  """
  fetch aggregated fields from the table: "app.artist"
  """
  app_artist_aggregate(
    """distinct select on columns"""
    distinct_on: [app_artist_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_artist_order_by!]

    """filter the rows returned"""
    where: app_artist_bool_exp
  ): app_artist_aggregate!

  """fetch data from the table: "app.artist" using primary key columns"""
  app_artist_by_pk(id: bigint!): app_artist

  """
  fetch data from the table: "app.deal"
  """
  app_deal(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): [app_deal!]!

  """
  fetch aggregated fields from the table: "app.deal"
  """
  app_deal_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_order_by!]

    """filter the rows returned"""
    where: app_deal_bool_exp
  ): app_deal_aggregate!

  """fetch data from the table: "app.deal" using primary key columns"""
  app_deal_by_pk(id: bigint!): app_deal

  """
  fetch data from the table: "app.deal_event"
  """
  app_deal_event(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): [app_deal_event!]!

  """
  fetch aggregated fields from the table: "app.deal_event"
  """
  app_deal_event_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_order_by!]

    """filter the rows returned"""
    where: app_deal_event_bool_exp
  ): app_deal_event_aggregate!

  """
  fetch data from the table: "app.deal_event_billing_type"
  """
  app_deal_event_billing_type(
    """distinct select on columns"""
    distinct_on: [app_deal_event_billing_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_billing_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_billing_type_bool_exp
  ): [app_deal_event_billing_type!]!

  """
  fetch aggregated fields from the table: "app.deal_event_billing_type"
  """
  app_deal_event_billing_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_billing_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_billing_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_billing_type_bool_exp
  ): app_deal_event_billing_type_aggregate!

  """
  fetch data from the table: "app.deal_event_billing_type" using primary key columns
  """
  app_deal_event_billing_type_by_pk(value: String!): app_deal_event_billing_type

  """fetch data from the table: "app.deal_event" using primary key columns"""
  app_deal_event_by_pk(id: bigint!): app_deal_event

  """
  fetch data from the table: "app.deal_event_type"
  """
  app_deal_event_type(
    """distinct select on columns"""
    distinct_on: [app_deal_event_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_type_bool_exp
  ): [app_deal_event_type!]!

  """
  fetch aggregated fields from the table: "app.deal_event_type"
  """
  app_deal_event_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_event_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_event_type_order_by!]

    """filter the rows returned"""
    where: app_deal_event_type_bool_exp
  ): app_deal_event_type_aggregate!

  """
  fetch data from the table: "app.deal_event_type" using primary key columns
  """
  app_deal_event_type_by_pk(value: String!): app_deal_event_type

  """
  fetch data from the table: "app.deal_status_type"
  """
  app_deal_status_type(
    """distinct select on columns"""
    distinct_on: [app_deal_status_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_status_type_order_by!]

    """filter the rows returned"""
    where: app_deal_status_type_bool_exp
  ): [app_deal_status_type!]!

  """
  fetch aggregated fields from the table: "app.deal_status_type"
  """
  app_deal_status_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_status_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_status_type_order_by!]

    """filter the rows returned"""
    where: app_deal_status_type_bool_exp
  ): app_deal_status_type_aggregate!

  """
  fetch data from the table: "app.deal_status_type" using primary key columns
  """
  app_deal_status_type_by_pk(value: String!): app_deal_status_type

  """
  fetch data from the table: "app.deal_structure"
  """
  app_deal_structure(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): [app_deal_structure!]!

  """
  fetch aggregated fields from the table: "app.deal_structure"
  """
  app_deal_structure_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_bool_exp
  ): app_deal_structure_aggregate!

  """
  fetch data from the table: "app.deal_structure" using primary key columns
  """
  app_deal_structure_by_pk(id: bigint!): app_deal_structure

  """
  fetch data from the table: "app.deal_structure_type"
  """
  app_deal_structure_type(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_type_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_type_bool_exp
  ): [app_deal_structure_type!]!

  """
  fetch aggregated fields from the table: "app.deal_structure_type"
  """
  app_deal_structure_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_structure_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_structure_type_order_by!]

    """filter the rows returned"""
    where: app_deal_structure_type_bool_exp
  ): app_deal_structure_type_aggregate!

  """
  fetch data from the table: "app.deal_structure_type" using primary key columns
  """
  app_deal_structure_type_by_pk(value: String!): app_deal_structure_type

  """
  fetch data from the table: "app.deal_venue"
  """
  app_deal_venue(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): [app_deal_venue!]!

  """
  fetch aggregated fields from the table: "app.deal_venue"
  """
  app_deal_venue_aggregate(
    """distinct select on columns"""
    distinct_on: [app_deal_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_deal_venue_order_by!]

    """filter the rows returned"""
    where: app_deal_venue_bool_exp
  ): app_deal_venue_aggregate!

  """fetch data from the table: "app.deal_venue" using primary key columns"""
  app_deal_venue_by_pk(id: bigint!): app_deal_venue

  """
  fetch data from the table: "app.expense"
  """
  app_expense(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): [app_expense!]!

  """
  fetch aggregated fields from the table: "app.expense"
  """
  app_expense_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_order_by!]

    """filter the rows returned"""
    where: app_expense_bool_exp
  ): app_expense_aggregate!

  """fetch data from the table: "app.expense" using primary key columns"""
  app_expense_by_pk(id: bigint!): app_expense

  """
  fetch data from the table: "app.expense_type"
  """
  app_expense_type(
    """distinct select on columns"""
    distinct_on: [app_expense_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_type_order_by!]

    """filter the rows returned"""
    where: app_expense_type_bool_exp
  ): [app_expense_type!]!

  """
  fetch aggregated fields from the table: "app.expense_type"
  """
  app_expense_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_expense_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_expense_type_order_by!]

    """filter the rows returned"""
    where: app_expense_type_bool_exp
  ): app_expense_type_aggregate!

  """
  fetch data from the table: "app.expense_type" using primary key columns
  """
  app_expense_type_by_pk(value: String!): app_expense_type

  """
  fetch data from the table: "app.performance_schedule"
  """
  app_performance_schedule(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): [app_performance_schedule!]!

  """
  fetch aggregated fields from the table: "app.performance_schedule"
  """
  app_performance_schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [app_performance_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_performance_schedule_order_by!]

    """filter the rows returned"""
    where: app_performance_schedule_bool_exp
  ): app_performance_schedule_aggregate!

  """
  fetch data from the table: "app.performance_schedule" using primary key columns
  """
  app_performance_schedule_by_pk(id: bigint!): app_performance_schedule

  """
  fetch data from the table: "app.person"
  """
  app_person(
    """distinct select on columns"""
    distinct_on: [app_person_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_person_order_by!]

    """filter the rows returned"""
    where: app_person_bool_exp
  ): [app_person!]!

  """
  fetch aggregated fields from the table: "app.person"
  """
  app_person_aggregate(
    """distinct select on columns"""
    distinct_on: [app_person_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_person_order_by!]

    """filter the rows returned"""
    where: app_person_bool_exp
  ): app_person_aggregate!

  """fetch data from the table: "app.person" using primary key columns"""
  app_person_by_pk(id: bigint!): app_person

  """
  fetch data from the table: "app.show_schedule"
  """
  app_show_schedule(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): [app_show_schedule!]!

  """
  fetch aggregated fields from the table: "app.show_schedule"
  """
  app_show_schedule_aggregate(
    """distinct select on columns"""
    distinct_on: [app_show_schedule_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_show_schedule_order_by!]

    """filter the rows returned"""
    where: app_show_schedule_bool_exp
  ): app_show_schedule_aggregate!

  """
  fetch data from the table: "app.show_schedule" using primary key columns
  """
  app_show_schedule_by_pk(id: bigint!): app_show_schedule

  """
  fetch data from the table: "app.ticket_scaling"
  """
  app_ticket_scaling(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): [app_ticket_scaling!]!

  """
  fetch aggregated fields from the table: "app.ticket_scaling"
  """
  app_ticket_scaling_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_scaling_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_scaling_order_by!]

    """filter the rows returned"""
    where: app_ticket_scaling_bool_exp
  ): app_ticket_scaling_aggregate!

  """
  fetch data from the table: "app.ticket_scaling" using primary key columns
  """
  app_ticket_scaling_by_pk(id: bigint!): app_ticket_scaling

  """
  fetch data from the table: "app.ticket_type"
  """
  app_ticket_type(
    """distinct select on columns"""
    distinct_on: [app_ticket_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_type_order_by!]

    """filter the rows returned"""
    where: app_ticket_type_bool_exp
  ): [app_ticket_type!]!

  """
  fetch aggregated fields from the table: "app.ticket_type"
  """
  app_ticket_type_aggregate(
    """distinct select on columns"""
    distinct_on: [app_ticket_type_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_ticket_type_order_by!]

    """filter the rows returned"""
    where: app_ticket_type_bool_exp
  ): app_ticket_type_aggregate!

  """fetch data from the table: "app.ticket_type" using primary key columns"""
  app_ticket_type_by_pk(value: String!): app_ticket_type

  """
  fetch data from the table: "app.venue"
  """
  app_venue(
    """distinct select on columns"""
    distinct_on: [app_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_venue_order_by!]

    """filter the rows returned"""
    where: app_venue_bool_exp
  ): [app_venue!]!

  """
  fetch aggregated fields from the table: "app.venue"
  """
  app_venue_aggregate(
    """distinct select on columns"""
    distinct_on: [app_venue_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [app_venue_order_by!]

    """filter the rows returned"""
    where: app_venue_bool_exp
  ): app_venue_aggregate!

  """fetch data from the table: "app.venue" using primary key columns"""
  app_venue_by_pk(id: bigint!): app_venue
}

scalar time

"""
Boolean expression to compare columns of type "time". All fields are combined with logical 'AND'.
"""
input time_comparison_exp {
  _eq: time
  _gt: time
  _gte: time
  _in: [time!]
  _is_null: Boolean
  _lt: time
  _lte: time
  _neq: time
  _nin: [time!]
}

scalar timestamptz

input timestamptz_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _cast: timestamptz_cast_exp
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

